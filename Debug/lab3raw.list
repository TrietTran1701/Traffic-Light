
lab3raw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a0c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002b18  08002b18  00012b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b44  08002b44  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08002b44  08002b44  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b44  08002b44  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b44  08002b44  00012b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b48  08002b48  00012b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08002b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000024  08002b70  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002b70  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000995b  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c1a  00000000  00000000  000299a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002b5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002bff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b37  00000000  00000000  0002c920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb22  00000000  00000000  00043457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082160  00000000  00000000  0004ef79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d10d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002858  00000000  00000000  000d112c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b00 	.word	0x08002b00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08002b00 	.word	0x08002b00

0800014c <turn_off_7seg>:
#include "main.h"
#include "display7SEG.h"


void turn_off_7seg(int disp_no)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(disp_no==1){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b01      	cmp	r3, #1
 8000158:	d105      	bne.n	8000166 <turn_off_7seg+0x1a>
		 HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 800015a:	2200      	movs	r2, #0
 800015c:	2102      	movs	r1, #2
 800015e:	480f      	ldr	r0, [pc, #60]	; (800019c <turn_off_7seg+0x50>)
 8000160:	f001 fcbd 	bl	8001ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
	}
	else{
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
	}
}
 8000164:	e016      	b.n	8000194 <turn_off_7seg+0x48>
	else if(disp_no==2)
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2b02      	cmp	r3, #2
 800016a:	d105      	bne.n	8000178 <turn_off_7seg+0x2c>
		 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 800016c:	2200      	movs	r2, #0
 800016e:	2104      	movs	r1, #4
 8000170:	480a      	ldr	r0, [pc, #40]	; (800019c <turn_off_7seg+0x50>)
 8000172:	f001 fcb4 	bl	8001ade <HAL_GPIO_WritePin>
}
 8000176:	e00d      	b.n	8000194 <turn_off_7seg+0x48>
	else if(disp_no==3)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2b03      	cmp	r3, #3
 800017c:	d105      	bne.n	800018a <turn_off_7seg+0x3e>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 800017e:	2200      	movs	r2, #0
 8000180:	2108      	movs	r1, #8
 8000182:	4806      	ldr	r0, [pc, #24]	; (800019c <turn_off_7seg+0x50>)
 8000184:	f001 fcab 	bl	8001ade <HAL_GPIO_WritePin>
}
 8000188:	e004      	b.n	8000194 <turn_off_7seg+0x48>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 800018a:	2200      	movs	r2, #0
 800018c:	2110      	movs	r1, #16
 800018e:	4803      	ldr	r0, [pc, #12]	; (800019c <turn_off_7seg+0x50>)
 8000190:	f001 fca5 	bl	8001ade <HAL_GPIO_WritePin>
}
 8000194:	bf00      	nop
 8000196:	3708      	adds	r7, #8
 8000198:	46bd      	mov	sp, r7
 800019a:	bd80      	pop	{r7, pc}
 800019c:	40010800 	.word	0x40010800

080001a0 <display7SEG>:
void display7SEG(unsigned int disp_no, int var1)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b086      	sub	sp, #24
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
 80001a8:	6039      	str	r1, [r7, #0]
	unsigned char disp_arr[10]={0x40,0x79,0x24,0x30,0x19,0x12,0x02,0x78,0x00,0x10};
 80001aa:	4a47      	ldr	r2, [pc, #284]	; (80002c8 <display7SEG+0x128>)
 80001ac:	f107 030c 	add.w	r3, r7, #12
 80001b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80001b2:	c303      	stmia	r3!, {r0, r1}
 80001b4:	801a      	strh	r2, [r3, #0]
	unsigned char bit_var, var2;

	if(disp_no==1) // turn on first 7segled
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2b01      	cmp	r3, #1
 80001ba:	d105      	bne.n	80001c8 <display7SEG+0x28>
	{
	    HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 80001bc:	2201      	movs	r2, #1
 80001be:	2102      	movs	r1, #2
 80001c0:	4842      	ldr	r0, [pc, #264]	; (80002cc <display7SEG+0x12c>)
 80001c2:	f001 fc8c 	bl	8001ade <HAL_GPIO_WritePin>
 80001c6:	e019      	b.n	80001fc <display7SEG+0x5c>

	}
	else if(disp_no==2) // turn on second 7segled
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	2b02      	cmp	r3, #2
 80001cc:	d105      	bne.n	80001da <display7SEG+0x3a>
	{
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80001ce:	2201      	movs	r2, #1
 80001d0:	2104      	movs	r1, #4
 80001d2:	483e      	ldr	r0, [pc, #248]	; (80002cc <display7SEG+0x12c>)
 80001d4:	f001 fc83 	bl	8001ade <HAL_GPIO_WritePin>
 80001d8:	e010      	b.n	80001fc <display7SEG+0x5c>


	}
	else if(disp_no==3)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	2b03      	cmp	r3, #3
 80001de:	d105      	bne.n	80001ec <display7SEG+0x4c>
	{
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80001e0:	2201      	movs	r2, #1
 80001e2:	2108      	movs	r1, #8
 80001e4:	4839      	ldr	r0, [pc, #228]	; (80002cc <display7SEG+0x12c>)
 80001e6:	f001 fc7a 	bl	8001ade <HAL_GPIO_WritePin>
 80001ea:	e007      	b.n	80001fc <display7SEG+0x5c>

	}

	else if(disp_no==4)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	2b04      	cmp	r3, #4
 80001f0:	d104      	bne.n	80001fc <display7SEG+0x5c>
	{
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2110      	movs	r1, #16
 80001f6:	4835      	ldr	r0, [pc, #212]	; (80002cc <display7SEG+0x12c>)
 80001f8:	f001 fc71 	bl	8001ade <HAL_GPIO_WritePin>
	}


	var2 = disp_arr[var1];
 80001fc:	f107 020c 	add.w	r2, r7, #12
 8000200:	683b      	ldr	r3, [r7, #0]
 8000202:	4413      	add	r3, r2
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	75fb      	strb	r3, [r7, #23]
	bit_var = var2 & 0x01;
 8000208:	7dfb      	ldrb	r3, [r7, #23]
 800020a:	f003 0301 	and.w	r3, r3, #1
 800020e:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, bit_var);
 8000210:	7dbb      	ldrb	r3, [r7, #22]
 8000212:	461a      	mov	r2, r3
 8000214:	2101      	movs	r1, #1
 8000216:	482e      	ldr	r0, [pc, #184]	; (80002d0 <display7SEG+0x130>)
 8000218:	f001 fc61 	bl	8001ade <HAL_GPIO_WritePin>

	bit_var=(var2>>1)& 0x01;
 800021c:	7dfb      	ldrb	r3, [r7, #23]
 800021e:	085b      	lsrs	r3, r3, #1
 8000220:	b2db      	uxtb	r3, r3
 8000222:	f003 0301 	and.w	r3, r3, #1
 8000226:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, bit_var);
 8000228:	7dbb      	ldrb	r3, [r7, #22]
 800022a:	461a      	mov	r2, r3
 800022c:	2102      	movs	r1, #2
 800022e:	4828      	ldr	r0, [pc, #160]	; (80002d0 <display7SEG+0x130>)
 8000230:	f001 fc55 	bl	8001ade <HAL_GPIO_WritePin>

	bit_var=(var2>>2)& 0x01;
 8000234:	7dfb      	ldrb	r3, [r7, #23]
 8000236:	089b      	lsrs	r3, r3, #2
 8000238:	b2db      	uxtb	r3, r3
 800023a:	f003 0301 	and.w	r3, r3, #1
 800023e:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, bit_var);
 8000240:	7dbb      	ldrb	r3, [r7, #22]
 8000242:	461a      	mov	r2, r3
 8000244:	2104      	movs	r1, #4
 8000246:	4822      	ldr	r0, [pc, #136]	; (80002d0 <display7SEG+0x130>)
 8000248:	f001 fc49 	bl	8001ade <HAL_GPIO_WritePin>

	bit_var=(var2>>3)& 0x01;
 800024c:	7dfb      	ldrb	r3, [r7, #23]
 800024e:	08db      	lsrs	r3, r3, #3
 8000250:	b2db      	uxtb	r3, r3
 8000252:	f003 0301 	and.w	r3, r3, #1
 8000256:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, bit_var);
 8000258:	7dbb      	ldrb	r3, [r7, #22]
 800025a:	461a      	mov	r2, r3
 800025c:	2108      	movs	r1, #8
 800025e:	481c      	ldr	r0, [pc, #112]	; (80002d0 <display7SEG+0x130>)
 8000260:	f001 fc3d 	bl	8001ade <HAL_GPIO_WritePin>

	bit_var=(var2>>4)& 0x01;
 8000264:	7dfb      	ldrb	r3, [r7, #23]
 8000266:	091b      	lsrs	r3, r3, #4
 8000268:	b2db      	uxtb	r3, r3
 800026a:	f003 0301 	and.w	r3, r3, #1
 800026e:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, bit_var);
 8000270:	7dbb      	ldrb	r3, [r7, #22]
 8000272:	461a      	mov	r2, r3
 8000274:	2110      	movs	r1, #16
 8000276:	4816      	ldr	r0, [pc, #88]	; (80002d0 <display7SEG+0x130>)
 8000278:	f001 fc31 	bl	8001ade <HAL_GPIO_WritePin>

	bit_var=(var2>>5)& 0x01;
 800027c:	7dfb      	ldrb	r3, [r7, #23]
 800027e:	095b      	lsrs	r3, r3, #5
 8000280:	b2db      	uxtb	r3, r3
 8000282:	f003 0301 	and.w	r3, r3, #1
 8000286:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, bit_var);
 8000288:	7dbb      	ldrb	r3, [r7, #22]
 800028a:	461a      	mov	r2, r3
 800028c:	2120      	movs	r1, #32
 800028e:	4810      	ldr	r0, [pc, #64]	; (80002d0 <display7SEG+0x130>)
 8000290:	f001 fc25 	bl	8001ade <HAL_GPIO_WritePin>

	bit_var=(var2>>6)& 0x01;
 8000294:	7dfb      	ldrb	r3, [r7, #23]
 8000296:	099b      	lsrs	r3, r3, #6
 8000298:	b2db      	uxtb	r3, r3
 800029a:	f003 0301 	and.w	r3, r3, #1
 800029e:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, bit_var);
 80002a0:	7dbb      	ldrb	r3, [r7, #22]
 80002a2:	461a      	mov	r2, r3
 80002a4:	2140      	movs	r1, #64	; 0x40
 80002a6:	480a      	ldr	r0, [pc, #40]	; (80002d0 <display7SEG+0x130>)
 80002a8:	f001 fc19 	bl	8001ade <HAL_GPIO_WritePin>

	bit_var=(var2>>7)& 0x01;
 80002ac:	7dfb      	ldrb	r3, [r7, #23]
 80002ae:	09db      	lsrs	r3, r3, #7
 80002b0:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, bit_var);
 80002b2:	7dbb      	ldrb	r3, [r7, #22]
 80002b4:	461a      	mov	r2, r3
 80002b6:	2180      	movs	r1, #128	; 0x80
 80002b8:	4805      	ldr	r0, [pc, #20]	; (80002d0 <display7SEG+0x130>)
 80002ba:	f001 fc10 	bl	8001ade <HAL_GPIO_WritePin>
}
 80002be:	bf00      	nop
 80002c0:	3718      	adds	r7, #24
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	08002b18 	.word	0x08002b18
 80002cc:	40010800 	.word	0x40010800
 80002d0:	40010c00 	.word	0x40010c00

080002d4 <display_mode>:

void display_mode(int mode)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
	  for(int i=0;i<40;i++)
 80002dc:	2300      	movs	r3, #0
 80002de:	60fb      	str	r3, [r7, #12]
 80002e0:	e016      	b.n	8000310 <display_mode+0x3c>
	  {
		  display7SEG(1, 0);
 80002e2:	2100      	movs	r1, #0
 80002e4:	2001      	movs	r0, #1
 80002e6:	f7ff ff5b 	bl	80001a0 <display7SEG>
		  HAL_Delay(1);
 80002ea:	2001      	movs	r0, #1
 80002ec:	f001 f934 	bl	8001558 <HAL_Delay>
		  turn_off_7seg(1);
 80002f0:	2001      	movs	r0, #1
 80002f2:	f7ff ff2b 	bl	800014c <turn_off_7seg>

		  display7SEG(2, mode);
 80002f6:	6879      	ldr	r1, [r7, #4]
 80002f8:	2002      	movs	r0, #2
 80002fa:	f7ff ff51 	bl	80001a0 <display7SEG>
		  HAL_Delay(1);
 80002fe:	2001      	movs	r0, #1
 8000300:	f001 f92a 	bl	8001558 <HAL_Delay>
		  turn_off_7seg(2);
 8000304:	2002      	movs	r0, #2
 8000306:	f7ff ff21 	bl	800014c <turn_off_7seg>
	  for(int i=0;i<40;i++)
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	3301      	adds	r3, #1
 800030e:	60fb      	str	r3, [r7, #12]
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	2b27      	cmp	r3, #39	; 0x27
 8000314:	dde5      	ble.n	80002e2 <display_mode+0xe>
	  }


}
 8000316:	bf00      	nop
 8000318:	bf00      	nop
 800031a:	3710      	adds	r7, #16
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <display_light>:


int t,i,k,l,j,s,o;

enum ButtonState display_light()
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b086      	sub	sp, #24
 8000324:	af00      	add	r7, sp, #0
	int chuc,donvi,chuc1,donvi1;
	donvi1=l%10;
 8000326:	4b41      	ldr	r3, [pc, #260]	; (800042c <display_light+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	4b41      	ldr	r3, [pc, #260]	; (8000430 <display_light+0x110>)
 800032c:	fb83 1302 	smull	r1, r3, r3, r2
 8000330:	1099      	asrs	r1, r3, #2
 8000332:	17d3      	asrs	r3, r2, #31
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	460b      	mov	r3, r1
 8000338:	009b      	lsls	r3, r3, #2
 800033a:	440b      	add	r3, r1
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	1ad3      	subs	r3, r2, r3
 8000340:	613b      	str	r3, [r7, #16]
	chuc1=(l%100)/10;
 8000342:	4b3a      	ldr	r3, [pc, #232]	; (800042c <display_light+0x10c>)
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	4b3b      	ldr	r3, [pc, #236]	; (8000434 <display_light+0x114>)
 8000348:	fb83 1302 	smull	r1, r3, r3, r2
 800034c:	1159      	asrs	r1, r3, #5
 800034e:	17d3      	asrs	r3, r2, #31
 8000350:	1acb      	subs	r3, r1, r3
 8000352:	2164      	movs	r1, #100	; 0x64
 8000354:	fb01 f303 	mul.w	r3, r1, r3
 8000358:	1ad3      	subs	r3, r2, r3
 800035a:	4a35      	ldr	r2, [pc, #212]	; (8000430 <display_light+0x110>)
 800035c:	fb82 1203 	smull	r1, r2, r2, r3
 8000360:	1092      	asrs	r2, r2, #2
 8000362:	17db      	asrs	r3, r3, #31
 8000364:	1ad3      	subs	r3, r2, r3
 8000366:	60fb      	str	r3, [r7, #12]
	donvi=t%10;
 8000368:	4b33      	ldr	r3, [pc, #204]	; (8000438 <display_light+0x118>)
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	4b30      	ldr	r3, [pc, #192]	; (8000430 <display_light+0x110>)
 800036e:	fb83 1302 	smull	r1, r3, r3, r2
 8000372:	1099      	asrs	r1, r3, #2
 8000374:	17d3      	asrs	r3, r2, #31
 8000376:	1ac9      	subs	r1, r1, r3
 8000378:	460b      	mov	r3, r1
 800037a:	009b      	lsls	r3, r3, #2
 800037c:	440b      	add	r3, r1
 800037e:	005b      	lsls	r3, r3, #1
 8000380:	1ad3      	subs	r3, r2, r3
 8000382:	60bb      	str	r3, [r7, #8]
	chuc=(t%100)/10;
 8000384:	4b2c      	ldr	r3, [pc, #176]	; (8000438 <display_light+0x118>)
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	4b2a      	ldr	r3, [pc, #168]	; (8000434 <display_light+0x114>)
 800038a:	fb83 1302 	smull	r1, r3, r3, r2
 800038e:	1159      	asrs	r1, r3, #5
 8000390:	17d3      	asrs	r3, r2, #31
 8000392:	1acb      	subs	r3, r1, r3
 8000394:	2164      	movs	r1, #100	; 0x64
 8000396:	fb01 f303 	mul.w	r3, r1, r3
 800039a:	1ad3      	subs	r3, r2, r3
 800039c:	4a24      	ldr	r2, [pc, #144]	; (8000430 <display_light+0x110>)
 800039e:	fb82 1203 	smull	r1, r2, r2, r3
 80003a2:	1092      	asrs	r2, r2, #2
 80003a4:	17db      	asrs	r3, r3, #31
 80003a6:	1ad3      	subs	r3, r2, r3
 80003a8:	607b      	str	r3, [r7, #4]
	int delay_time = 90;
 80003aa:	235a      	movs	r3, #90	; 0x5a
 80003ac:	603b      	str	r3, [r7, #0]

	 for(int i=0;i<delay_time;i++)
 80003ae:	2300      	movs	r3, #0
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	e032      	b.n	800041a <display_light+0xfa>
	{
		 if(is_button_pressed(0)) return MODE_1;
 80003b4:	2000      	movs	r0, #0
 80003b6:	f000 fe59 	bl	800106c <is_button_pressed>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <display_light+0xa4>
 80003c0:	2301      	movs	r3, #1
 80003c2:	e02f      	b.n	8000424 <display_light+0x104>

	  display7SEG(1, chuc);
 80003c4:	6879      	ldr	r1, [r7, #4]
 80003c6:	2001      	movs	r0, #1
 80003c8:	f7ff feea 	bl	80001a0 <display7SEG>
	  HAL_Delay(1);
 80003cc:	2001      	movs	r0, #1
 80003ce:	f001 f8c3 	bl	8001558 <HAL_Delay>
	  turn_off_7seg(1);
 80003d2:	2001      	movs	r0, #1
 80003d4:	f7ff feba 	bl	800014c <turn_off_7seg>

	  display7SEG(2, donvi);
 80003d8:	68b9      	ldr	r1, [r7, #8]
 80003da:	2002      	movs	r0, #2
 80003dc:	f7ff fee0 	bl	80001a0 <display7SEG>
	  HAL_Delay(1);
 80003e0:	2001      	movs	r0, #1
 80003e2:	f001 f8b9 	bl	8001558 <HAL_Delay>
	  turn_off_7seg(2);
 80003e6:	2002      	movs	r0, #2
 80003e8:	f7ff feb0 	bl	800014c <turn_off_7seg>

	  display7SEG(3, chuc1);
 80003ec:	68f9      	ldr	r1, [r7, #12]
 80003ee:	2003      	movs	r0, #3
 80003f0:	f7ff fed6 	bl	80001a0 <display7SEG>
	  HAL_Delay(1);
 80003f4:	2001      	movs	r0, #1
 80003f6:	f001 f8af 	bl	8001558 <HAL_Delay>
	  turn_off_7seg(3);
 80003fa:	2003      	movs	r0, #3
 80003fc:	f7ff fea6 	bl	800014c <turn_off_7seg>

	  display7SEG(4, donvi1);
 8000400:	6939      	ldr	r1, [r7, #16]
 8000402:	2004      	movs	r0, #4
 8000404:	f7ff fecc 	bl	80001a0 <display7SEG>
	  HAL_Delay(1);
 8000408:	2001      	movs	r0, #1
 800040a:	f001 f8a5 	bl	8001558 <HAL_Delay>
	  turn_off_7seg(4);
 800040e:	2004      	movs	r0, #4
 8000410:	f7ff fe9c 	bl	800014c <turn_off_7seg>
	 for(int i=0;i<delay_time;i++)
 8000414:	697b      	ldr	r3, [r7, #20]
 8000416:	3301      	adds	r3, #1
 8000418:	617b      	str	r3, [r7, #20]
 800041a:	697a      	ldr	r2, [r7, #20]
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	429a      	cmp	r2, r3
 8000420:	dbc8      	blt.n	80003b4 <display_light+0x94>

	 }
	 return MODE_0;
 8000422:	2300      	movs	r3, #0
}
 8000424:	4618      	mov	r0, r3
 8000426:	3718      	adds	r7, #24
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	20000068 	.word	0x20000068
 8000430:	66666667 	.word	0x66666667
 8000434:	51eb851f 	.word	0x51eb851f
 8000438:	2000005c 	.word	0x2000005c

0800043c <display_led_normal>:

 enum ButtonState display_led_normal(int tred, int tgreen, int tyellow)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b086      	sub	sp, #24
 8000440:	af00      	add	r7, sp, #0
 8000442:	60f8      	str	r0, [r7, #12]
 8000444:	60b9      	str	r1, [r7, #8]
 8000446:	607a      	str	r2, [r7, #4]
		++tred;
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	3301      	adds	r3, #1
 800044c:	60fb      	str	r3, [r7, #12]
		++tgreen;
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	3301      	adds	r3, #1
 8000452:	60bb      	str	r3, [r7, #8]

		while(1){

			if(is_button_pressed(0)) return MODE_1;
 8000454:	2000      	movs	r0, #0
 8000456:	f000 fe09 	bl	800106c <is_button_pressed>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <display_led_normal+0x28>
 8000460:	2301      	movs	r3, #1
 8000462:	e158      	b.n	8000716 <display_led_normal+0x2da>
			t=tred,l=tgreen,s=tyellow,o=tred;
 8000464:	4aae      	ldr	r2, [pc, #696]	; (8000720 <display_led_normal+0x2e4>)
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	6013      	str	r3, [r2, #0]
 800046a:	4aae      	ldr	r2, [pc, #696]	; (8000724 <display_led_normal+0x2e8>)
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	6013      	str	r3, [r2, #0]
 8000470:	4aad      	ldr	r2, [pc, #692]	; (8000728 <display_led_normal+0x2ec>)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	6013      	str	r3, [r2, #0]
 8000476:	4aad      	ldr	r2, [pc, #692]	; (800072c <display_led_normal+0x2f0>)
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	6013      	str	r3, [r2, #0]
			for(int k =tred;k>0;k--)
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	617b      	str	r3, [r7, #20]
 8000480:	e093      	b.n	80005aa <display_led_normal+0x16e>
			{
				if(is_button_pressed(0)) return MODE_1;
 8000482:	2000      	movs	r0, #0
 8000484:	f000 fdf2 	bl	800106c <is_button_pressed>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <display_led_normal+0x56>
 800048e:	2301      	movs	r3, #1
 8000490:	e141      	b.n	8000716 <display_led_normal+0x2da>
				t--;
 8000492:	4ba3      	ldr	r3, [pc, #652]	; (8000720 <display_led_normal+0x2e4>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	3b01      	subs	r3, #1
 8000498:	4aa1      	ldr	r2, [pc, #644]	; (8000720 <display_led_normal+0x2e4>)
 800049a:	6013      	str	r3, [r2, #0]
				l--;
 800049c:	4ba1      	ldr	r3, [pc, #644]	; (8000724 <display_led_normal+0x2e8>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	3b01      	subs	r3, #1
 80004a2:	4aa0      	ldr	r2, [pc, #640]	; (8000724 <display_led_normal+0x2e8>)
 80004a4:	6013      	str	r3, [r2, #0]
				o--;
 80004a6:	4ba1      	ldr	r3, [pc, #644]	; (800072c <display_led_normal+0x2f0>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	3b01      	subs	r3, #1
 80004ac:	4a9f      	ldr	r2, [pc, #636]	; (800072c <display_led_normal+0x2f0>)
 80004ae:	6013      	str	r3, [r2, #0]
				if(l<0)
 80004b0:	4b9c      	ldr	r3, [pc, #624]	; (8000724 <display_led_normal+0x2e8>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	da0b      	bge.n	80004d0 <display_led_normal+0x94>
				{
					if(is_button_pressed(0)) return MODE_1;
 80004b8:	2000      	movs	r0, #0
 80004ba:	f000 fdd7 	bl	800106c <is_button_pressed>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <display_led_normal+0x8c>
 80004c4:	2301      	movs	r3, #1
 80004c6:	e126      	b.n	8000716 <display_led_normal+0x2da>
					l=s;
 80004c8:	4b97      	ldr	r3, [pc, #604]	; (8000728 <display_led_normal+0x2ec>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a95      	ldr	r2, [pc, #596]	; (8000724 <display_led_normal+0x2e8>)
 80004ce:	6013      	str	r3, [r2, #0]
				}


				if(o<tred-tgreen)
 80004d0:	68fa      	ldr	r2, [r7, #12]
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	1ad2      	subs	r2, r2, r3
 80004d6:	4b95      	ldr	r3, [pc, #596]	; (800072c <display_led_normal+0x2f0>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	429a      	cmp	r2, r3
 80004dc:	dd2c      	ble.n	8000538 <display_led_normal+0xfc>
				{
					if(is_button_pressed(0)) return MODE_1;
 80004de:	2000      	movs	r0, #0
 80004e0:	f000 fdc4 	bl	800106c <is_button_pressed>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <display_led_normal+0xb2>
 80004ea:	2301      	movs	r3, #1
 80004ec:	e113      	b.n	8000716 <display_led_normal+0x2da>
					HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, GPIO_PIN_RESET);
 80004ee:	2200      	movs	r2, #0
 80004f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f4:	488e      	ldr	r0, [pc, #568]	; (8000730 <display_led_normal+0x2f4>)
 80004f6:	f001 faf2 	bl	8001ade <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, GPIO_PIN_SET);
 80004fa:	2201      	movs	r2, #1
 80004fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000500:	488b      	ldr	r0, [pc, #556]	; (8000730 <display_led_normal+0x2f4>)
 8000502:	f001 faec 	bl	8001ade <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800050c:	4888      	ldr	r0, [pc, #544]	; (8000730 <display_led_normal+0x2f4>)
 800050e:	f001 fae6 	bl	8001ade <HAL_GPIO_WritePin>



					HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, GPIO_PIN_SET);
 8000512:	2201      	movs	r2, #1
 8000514:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000518:	4885      	ldr	r0, [pc, #532]	; (8000730 <display_led_normal+0x2f4>)
 800051a:	f001 fae0 	bl	8001ade <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000524:	4882      	ldr	r0, [pc, #520]	; (8000730 <display_led_normal+0x2f4>)
 8000526:	f001 fada 	bl	8001ade <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_SET);
 800052a:	2201      	movs	r2, #1
 800052c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000530:	487f      	ldr	r0, [pc, #508]	; (8000730 <display_led_normal+0x2f4>)
 8000532:	f001 fad4 	bl	8001ade <HAL_GPIO_WritePin>
 8000536:	e02b      	b.n	8000590 <display_led_normal+0x154>
				}
				else{
					if(is_button_pressed(0)) return MODE_1;
 8000538:	2000      	movs	r0, #0
 800053a:	f000 fd97 	bl	800106c <is_button_pressed>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <display_led_normal+0x10c>
 8000544:	2301      	movs	r3, #1
 8000546:	e0e6      	b.n	8000716 <display_led_normal+0x2da>
					HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800054e:	4878      	ldr	r0, [pc, #480]	; (8000730 <display_led_normal+0x2f4>)
 8000550:	f001 fac5 	bl	8001ade <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, GPIO_PIN_SET);
 8000554:	2201      	movs	r2, #1
 8000556:	f44f 7100 	mov.w	r1, #512	; 0x200
 800055a:	4875      	ldr	r0, [pc, #468]	; (8000730 <display_led_normal+0x2f4>)
 800055c:	f001 fabf 	bl	8001ade <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_SET);
 8000560:	2201      	movs	r2, #1
 8000562:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000566:	4872      	ldr	r0, [pc, #456]	; (8000730 <display_led_normal+0x2f4>)
 8000568:	f001 fab9 	bl	8001ade <HAL_GPIO_WritePin>



					HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, GPIO_PIN_SET);
 800056c:	2201      	movs	r2, #1
 800056e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000572:	486f      	ldr	r0, [pc, #444]	; (8000730 <display_led_normal+0x2f4>)
 8000574:	f001 fab3 	bl	8001ade <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, GPIO_PIN_SET);
 8000578:	2201      	movs	r2, #1
 800057a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800057e:	486c      	ldr	r0, [pc, #432]	; (8000730 <display_led_normal+0x2f4>)
 8000580:	f001 faad 	bl	8001ade <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800058a:	4869      	ldr	r0, [pc, #420]	; (8000730 <display_led_normal+0x2f4>)
 800058c:	f001 faa7 	bl	8001ade <HAL_GPIO_WritePin>
				}
				if(is_button_pressed(0)) return MODE_1;
 8000590:	2000      	movs	r0, #0
 8000592:	f000 fd6b 	bl	800106c <is_button_pressed>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <display_led_normal+0x164>
 800059c:	2301      	movs	r3, #1
 800059e:	e0ba      	b.n	8000716 <display_led_normal+0x2da>
				display_light();
 80005a0:	f7ff febe 	bl	8000320 <display_light>
			for(int k =tred;k>0;k--)
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	3b01      	subs	r3, #1
 80005a8:	617b      	str	r3, [r7, #20]
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	f73f af68 	bgt.w	8000482 <display_led_normal+0x46>



			}
			break;
 80005b2:	bf00      	nop



		while(1){

			if(is_button_pressed(0)) return MODE_1;
 80005b4:	2000      	movs	r0, #0
 80005b6:	f000 fd59 	bl	800106c <is_button_pressed>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <display_led_normal+0x188>
 80005c0:	2301      	movs	r3, #1
 80005c2:	e0a8      	b.n	8000716 <display_led_normal+0x2da>
			t=tgreen,l=tred,s=tyellow,o=tred;
 80005c4:	4a56      	ldr	r2, [pc, #344]	; (8000720 <display_led_normal+0x2e4>)
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	6013      	str	r3, [r2, #0]
 80005ca:	4a56      	ldr	r2, [pc, #344]	; (8000724 <display_led_normal+0x2e8>)
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4a55      	ldr	r2, [pc, #340]	; (8000728 <display_led_normal+0x2ec>)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	6013      	str	r3, [r2, #0]
 80005d6:	4a55      	ldr	r2, [pc, #340]	; (800072c <display_led_normal+0x2f0>)
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	6013      	str	r3, [r2, #0]
			for(int k =tred;k>0;k--)
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	e093      	b.n	800070a <display_led_normal+0x2ce>
			{
				if(is_button_pressed(0)) return MODE_1;
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 fd42 	bl	800106c <is_button_pressed>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <display_led_normal+0x1b6>
 80005ee:	2301      	movs	r3, #1
 80005f0:	e091      	b.n	8000716 <display_led_normal+0x2da>
				t--;
 80005f2:	4b4b      	ldr	r3, [pc, #300]	; (8000720 <display_led_normal+0x2e4>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	3b01      	subs	r3, #1
 80005f8:	4a49      	ldr	r2, [pc, #292]	; (8000720 <display_led_normal+0x2e4>)
 80005fa:	6013      	str	r3, [r2, #0]
				l--;
 80005fc:	4b49      	ldr	r3, [pc, #292]	; (8000724 <display_led_normal+0x2e8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	3b01      	subs	r3, #1
 8000602:	4a48      	ldr	r2, [pc, #288]	; (8000724 <display_led_normal+0x2e8>)
 8000604:	6013      	str	r3, [r2, #0]
				o--;
 8000606:	4b49      	ldr	r3, [pc, #292]	; (800072c <display_led_normal+0x2f0>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	3b01      	subs	r3, #1
 800060c:	4a47      	ldr	r2, [pc, #284]	; (800072c <display_led_normal+0x2f0>)
 800060e:	6013      	str	r3, [r2, #0]

				if(t<0)
 8000610:	4b43      	ldr	r3, [pc, #268]	; (8000720 <display_led_normal+0x2e4>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	da0b      	bge.n	8000630 <display_led_normal+0x1f4>
				{
					if(is_button_pressed(0)) return MODE_1;
 8000618:	2000      	movs	r0, #0
 800061a:	f000 fd27 	bl	800106c <is_button_pressed>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <display_led_normal+0x1ec>
 8000624:	2301      	movs	r3, #1
 8000626:	e076      	b.n	8000716 <display_led_normal+0x2da>
					t = s;
 8000628:	4b3f      	ldr	r3, [pc, #252]	; (8000728 <display_led_normal+0x2ec>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a3c      	ldr	r2, [pc, #240]	; (8000720 <display_led_normal+0x2e4>)
 800062e:	6013      	str	r3, [r2, #0]
				}

				if(o<tred-tgreen)
 8000630:	68fa      	ldr	r2, [r7, #12]
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	1ad2      	subs	r2, r2, r3
 8000636:	4b3d      	ldr	r3, [pc, #244]	; (800072c <display_led_normal+0x2f0>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	429a      	cmp	r2, r3
 800063c:	dd2c      	ble.n	8000698 <display_led_normal+0x25c>
				{
					if(is_button_pressed(0)) return MODE_1;
 800063e:	2000      	movs	r0, #0
 8000640:	f000 fd14 	bl	800106c <is_button_pressed>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <display_led_normal+0x212>
 800064a:	2301      	movs	r3, #1
 800064c:	e063      	b.n	8000716 <display_led_normal+0x2da>
					HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, GPIO_PIN_SET);
 800064e:	2201      	movs	r2, #1
 8000650:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000654:	4836      	ldr	r0, [pc, #216]	; (8000730 <display_led_normal+0x2f4>)
 8000656:	f001 fa42 	bl	8001ade <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000660:	4833      	ldr	r0, [pc, #204]	; (8000730 <display_led_normal+0x2f4>)
 8000662:	f001 fa3c 	bl	8001ade <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_SET);
 8000666:	2201      	movs	r2, #1
 8000668:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800066c:	4830      	ldr	r0, [pc, #192]	; (8000730 <display_led_normal+0x2f4>)
 800066e:	f001 fa36 	bl	8001ade <HAL_GPIO_WritePin>


					HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000678:	482d      	ldr	r0, [pc, #180]	; (8000730 <display_led_normal+0x2f4>)
 800067a:	f001 fa30 	bl	8001ade <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, GPIO_PIN_SET);
 800067e:	2201      	movs	r2, #1
 8000680:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000684:	482a      	ldr	r0, [pc, #168]	; (8000730 <display_led_normal+0x2f4>)
 8000686:	f001 fa2a 	bl	8001ade <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_SET);
 800068a:	2201      	movs	r2, #1
 800068c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000690:	4827      	ldr	r0, [pc, #156]	; (8000730 <display_led_normal+0x2f4>)
 8000692:	f001 fa24 	bl	8001ade <HAL_GPIO_WritePin>
 8000696:	e02b      	b.n	80006f0 <display_led_normal+0x2b4>
				}
				else{
					if(is_button_pressed(0)) return MODE_1;
 8000698:	2000      	movs	r0, #0
 800069a:	f000 fce7 	bl	800106c <is_button_pressed>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <display_led_normal+0x26c>
 80006a4:	2301      	movs	r3, #1
 80006a6:	e036      	b.n	8000716 <display_led_normal+0x2da>
					HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ae:	4820      	ldr	r0, [pc, #128]	; (8000730 <display_led_normal+0x2f4>)
 80006b0:	f001 fa15 	bl	8001ade <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ba:	481d      	ldr	r0, [pc, #116]	; (8000730 <display_led_normal+0x2f4>)
 80006bc:	f001 fa0f 	bl	8001ade <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c6:	481a      	ldr	r0, [pc, #104]	; (8000730 <display_led_normal+0x2f4>)
 80006c8:	f001 fa09 	bl	8001ade <HAL_GPIO_WritePin>


					HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d2:	4817      	ldr	r0, [pc, #92]	; (8000730 <display_led_normal+0x2f4>)
 80006d4:	f001 fa03 	bl	8001ade <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, GPIO_PIN_SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006de:	4814      	ldr	r0, [pc, #80]	; (8000730 <display_led_normal+0x2f4>)
 80006e0:	f001 f9fd 	bl	8001ade <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ea:	4811      	ldr	r0, [pc, #68]	; (8000730 <display_led_normal+0x2f4>)
 80006ec:	f001 f9f7 	bl	8001ade <HAL_GPIO_WritePin>
				}
				if(is_button_pressed(0)) return MODE_1;
 80006f0:	2000      	movs	r0, #0
 80006f2:	f000 fcbb 	bl	800106c <is_button_pressed>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <display_led_normal+0x2c4>
 80006fc:	2301      	movs	r3, #1
 80006fe:	e00a      	b.n	8000716 <display_led_normal+0x2da>
				display_light();
 8000700:	f7ff fe0e 	bl	8000320 <display_light>
			for(int k =tred;k>0;k--)
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	3b01      	subs	r3, #1
 8000708:	613b      	str	r3, [r7, #16]
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	2b00      	cmp	r3, #0
 800070e:	f73f af68 	bgt.w	80005e2 <display_led_normal+0x1a6>


			}
			break;
 8000712:	bf00      	nop
		}

		return MODE_0;
 8000714:	2300      	movs	r3, #0
}
 8000716:	4618      	mov	r0, r3
 8000718:	3718      	adds	r7, #24
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	2000005c 	.word	0x2000005c
 8000724:	20000068 	.word	0x20000068
 8000728:	20000074 	.word	0x20000074
 800072c:	20000064 	.word	0x20000064
 8000730:	40010800 	.word	0x40010800

08000734 <display_led_red>:
 enum ButtonState display_led_red(int time)
 {
 8000734:	b580      	push	{r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	 int flag1 = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
	 int flag2 = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]
	 int chuc;
	 int donvi;
	 int dem;
	 if(flag1==0 && flag2==0)
 8000744:	69fb      	ldr	r3, [r7, #28]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d169      	bne.n	800081e <display_led_red+0xea>
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d166      	bne.n	800081e <display_led_red+0xea>
	 {
		 for(dem=time;dem>=0;dem--)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	e060      	b.n	8000818 <display_led_red+0xe4>
		 {
	  	      chuc = dem/10;
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	4a48      	ldr	r2, [pc, #288]	; (800087c <display_led_red+0x148>)
 800075a:	fb82 1203 	smull	r1, r2, r2, r3
 800075e:	1092      	asrs	r2, r2, #2
 8000760:	17db      	asrs	r3, r3, #31
 8000762:	1ad3      	subs	r3, r2, r3
 8000764:	60fb      	str	r3, [r7, #12]
	  	  	  donvi = dem%10;
 8000766:	697a      	ldr	r2, [r7, #20]
 8000768:	4b44      	ldr	r3, [pc, #272]	; (800087c <display_led_red+0x148>)
 800076a:	fb83 1302 	smull	r1, r3, r3, r2
 800076e:	1099      	asrs	r1, r3, #2
 8000770:	17d3      	asrs	r3, r2, #31
 8000772:	1ac9      	subs	r1, r1, r3
 8000774:	460b      	mov	r3, r1
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	440b      	add	r3, r1
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	60bb      	str	r3, [r7, #8]
			  if(flag1==1 || flag2==1) break;
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d04b      	beq.n	800081e <display_led_red+0xea>
 8000786:	69bb      	ldr	r3, [r7, #24]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d048      	beq.n	800081e <display_led_red+0xea>
			  for(int j=0;j<DELAY_TIME;j++)
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	e03c      	b.n	800080c <display_led_red+0xd8>
			  {
				  if(is_button_pressed(0)){
 8000792:	2000      	movs	r0, #0
 8000794:	f000 fc6a 	bl	800106c <is_button_pressed>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d002      	beq.n	80007a4 <display_led_red+0x70>
				  	flag1 = 1;
 800079e:	2301      	movs	r3, #1
 80007a0:	61fb      	str	r3, [r7, #28]
				  	break;
 80007a2:	e036      	b.n	8000812 <display_led_red+0xde>
				  }

				  if(is_button_pressed(1)){
 80007a4:	2001      	movs	r0, #1
 80007a6:	f000 fc61 	bl	800106c <is_button_pressed>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d002      	beq.n	80007b6 <display_led_red+0x82>
				  	flag2 = 1;
 80007b0:	2301      	movs	r3, #1
 80007b2:	61bb      	str	r3, [r7, #24]
				  	break;
 80007b4:	e02d      	b.n	8000812 <display_led_red+0xde>
				  }
				  	display7SEG(1, 0);
 80007b6:	2100      	movs	r1, #0
 80007b8:	2001      	movs	r0, #1
 80007ba:	f7ff fcf1 	bl	80001a0 <display7SEG>
				  	HAL_Delay(1);
 80007be:	2001      	movs	r0, #1
 80007c0:	f000 feca 	bl	8001558 <HAL_Delay>
				  	turn_off_7seg(1);
 80007c4:	2001      	movs	r0, #1
 80007c6:	f7ff fcc1 	bl	800014c <turn_off_7seg>

				    display7SEG(2, 1);
 80007ca:	2101      	movs	r1, #1
 80007cc:	2002      	movs	r0, #2
 80007ce:	f7ff fce7 	bl	80001a0 <display7SEG>
				  	HAL_Delay(1);
 80007d2:	2001      	movs	r0, #1
 80007d4:	f000 fec0 	bl	8001558 <HAL_Delay>
				  	turn_off_7seg(2);
 80007d8:	2002      	movs	r0, #2
 80007da:	f7ff fcb7 	bl	800014c <turn_off_7seg>

				  	display7SEG(3, chuc);
 80007de:	68f9      	ldr	r1, [r7, #12]
 80007e0:	2003      	movs	r0, #3
 80007e2:	f7ff fcdd 	bl	80001a0 <display7SEG>
				  	HAL_Delay(10);
 80007e6:	200a      	movs	r0, #10
 80007e8:	f000 feb6 	bl	8001558 <HAL_Delay>
				  	turn_off_7seg(3);
 80007ec:	2003      	movs	r0, #3
 80007ee:	f7ff fcad 	bl	800014c <turn_off_7seg>

				  	display7SEG(4, donvi);
 80007f2:	68b9      	ldr	r1, [r7, #8]
 80007f4:	2004      	movs	r0, #4
 80007f6:	f7ff fcd3 	bl	80001a0 <display7SEG>
				  	HAL_Delay(10);
 80007fa:	200a      	movs	r0, #10
 80007fc:	f000 feac 	bl	8001558 <HAL_Delay>
				  	turn_off_7seg(4);
 8000800:	2004      	movs	r0, #4
 8000802:	f7ff fca3 	bl	800014c <turn_off_7seg>
			  for(int j=0;j<DELAY_TIME;j++)
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	3301      	adds	r3, #1
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	2b13      	cmp	r3, #19
 8000810:	ddbf      	ble.n	8000792 <display_led_red+0x5e>
		 for(dem=time;dem>=0;dem--)
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	3b01      	subs	r3, #1
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	2b00      	cmp	r3, #0
 800081c:	da9b      	bge.n	8000756 <display_led_red+0x22>
			  }
		 }
	 }
	  HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000824:	4816      	ldr	r0, [pc, #88]	; (8000880 <display_led_red+0x14c>)
 8000826:	f001 f95a 	bl	8001ade <HAL_GPIO_WritePin>
	  HAL_Delay(20);
 800082a:	2014      	movs	r0, #20
 800082c:	f000 fe94 	bl	8001558 <HAL_Delay>
	  HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000836:	4812      	ldr	r0, [pc, #72]	; (8000880 <display_led_red+0x14c>)
 8000838:	f001 f951 	bl	8001ade <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 800083c:	2032      	movs	r0, #50	; 0x32
 800083e:	f000 fe8b 	bl	8001558 <HAL_Delay>

	  	if(flag1==0&&flag2==0) return MODE_1;
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d104      	bne.n	8000852 <display_led_red+0x11e>
 8000848:	69bb      	ldr	r3, [r7, #24]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d101      	bne.n	8000852 <display_led_red+0x11e>
 800084e:	2301      	movs	r3, #1
 8000850:	e010      	b.n	8000874 <display_led_red+0x140>
		else if(flag1==1 && flag2==0) return MODE_2;
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d104      	bne.n	8000862 <display_led_red+0x12e>
 8000858:	69bb      	ldr	r3, [r7, #24]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d101      	bne.n	8000862 <display_led_red+0x12e>
 800085e:	2302      	movs	r3, #2
 8000860:	e008      	b.n	8000874 <display_led_red+0x140>
		else if(flag1==0 && flag2==1) return  M1_BTN2;
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d104      	bne.n	8000872 <display_led_red+0x13e>
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d101      	bne.n	8000872 <display_led_red+0x13e>
 800086e:	2304      	movs	r3, #4
 8000870:	e000      	b.n	8000874 <display_led_red+0x140>
		else return MODE_0;
 8000872:	2300      	movs	r3, #0
 }
 8000874:	4618      	mov	r0, r3
 8000876:	3720      	adds	r7, #32
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	66666667 	.word	0x66666667
 8000880:	40010800 	.word	0x40010800

08000884 <display_counter_red>:
 enum ButtonState display_counter_red()
 {
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
		 int donvi;

		 int dem;


			 dem = count_red;
 800088a:	4b34      	ldr	r3, [pc, #208]	; (800095c <display_counter_red+0xd8>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	60bb      	str	r3, [r7, #8]
			 chuc = dem/10;
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	4a33      	ldr	r2, [pc, #204]	; (8000960 <display_counter_red+0xdc>)
 8000894:	fb82 1203 	smull	r1, r2, r2, r3
 8000898:	1092      	asrs	r2, r2, #2
 800089a:	17db      	asrs	r3, r3, #31
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	607b      	str	r3, [r7, #4]
			 donvi = dem%10;
 80008a0:	68ba      	ldr	r2, [r7, #8]
 80008a2:	4b2f      	ldr	r3, [pc, #188]	; (8000960 <display_counter_red+0xdc>)
 80008a4:	fb83 1302 	smull	r1, r3, r3, r2
 80008a8:	1099      	asrs	r1, r3, #2
 80008aa:	17d3      	asrs	r3, r2, #31
 80008ac:	1ac9      	subs	r1, r1, r3
 80008ae:	460b      	mov	r3, r1
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	440b      	add	r3, r1
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	1ad3      	subs	r3, r2, r3
 80008b8:	603b      	str	r3, [r7, #0]

			  for(int j=0;j<8;j++)
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	e02a      	b.n	8000916 <display_counter_red+0x92>
			  {
				  	display7SEG(1, 0);
 80008c0:	2100      	movs	r1, #0
 80008c2:	2001      	movs	r0, #1
 80008c4:	f7ff fc6c 	bl	80001a0 <display7SEG>
				  	HAL_Delay(1);
 80008c8:	2001      	movs	r0, #1
 80008ca:	f000 fe45 	bl	8001558 <HAL_Delay>
				  	turn_off_7seg(1);
 80008ce:	2001      	movs	r0, #1
 80008d0:	f7ff fc3c 	bl	800014c <turn_off_7seg>

				    display7SEG(2, 1);
 80008d4:	2101      	movs	r1, #1
 80008d6:	2002      	movs	r0, #2
 80008d8:	f7ff fc62 	bl	80001a0 <display7SEG>
				  	HAL_Delay(1);
 80008dc:	2001      	movs	r0, #1
 80008de:	f000 fe3b 	bl	8001558 <HAL_Delay>
				  	turn_off_7seg(2);
 80008e2:	2002      	movs	r0, #2
 80008e4:	f7ff fc32 	bl	800014c <turn_off_7seg>

				  	display7SEG(3, chuc);
 80008e8:	6879      	ldr	r1, [r7, #4]
 80008ea:	2003      	movs	r0, #3
 80008ec:	f7ff fc58 	bl	80001a0 <display7SEG>
				  	HAL_Delay(10);
 80008f0:	200a      	movs	r0, #10
 80008f2:	f000 fe31 	bl	8001558 <HAL_Delay>
				  	turn_off_7seg(3);
 80008f6:	2003      	movs	r0, #3
 80008f8:	f7ff fc28 	bl	800014c <turn_off_7seg>

				  	display7SEG(4, donvi);
 80008fc:	6839      	ldr	r1, [r7, #0]
 80008fe:	2004      	movs	r0, #4
 8000900:	f7ff fc4e 	bl	80001a0 <display7SEG>
				  	HAL_Delay(10);
 8000904:	200a      	movs	r0, #10
 8000906:	f000 fe27 	bl	8001558 <HAL_Delay>
				  	turn_off_7seg(4);
 800090a:	2004      	movs	r0, #4
 800090c:	f7ff fc1e 	bl	800014c <turn_off_7seg>
			  for(int j=0;j<8;j++)
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	3301      	adds	r3, #1
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	2b07      	cmp	r3, #7
 800091a:	ddd1      	ble.n	80008c0 <display_counter_red+0x3c>
			  }
		if(is_button_pressed(2)) return M1_BTN3;
 800091c:	2002      	movs	r0, #2
 800091e:	f000 fba5 	bl	800106c <is_button_pressed>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <display_counter_red+0xa8>
 8000928:	2305      	movs	r3, #5
 800092a:	e012      	b.n	8000952 <display_counter_red+0xce>
		if(is_button_pressed(1)){
 800092c:	2001      	movs	r0, #1
 800092e:	f000 fb9d 	bl	800106c <is_button_pressed>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d00b      	beq.n	8000950 <display_counter_red+0xcc>
			count_red++;
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <display_counter_red+0xd8>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	3301      	adds	r3, #1
 800093e:	4a07      	ldr	r2, [pc, #28]	; (800095c <display_counter_red+0xd8>)
 8000940:	6013      	str	r3, [r2, #0]
			if(count_red>99) count_red = 0;
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <display_counter_red+0xd8>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b63      	cmp	r3, #99	; 0x63
 8000948:	dd02      	ble.n	8000950 <display_counter_red+0xcc>
 800094a:	4b04      	ldr	r3, [pc, #16]	; (800095c <display_counter_red+0xd8>)
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
		}

		 return M1_BTN2;
 8000950:	2304      	movs	r3, #4


 }
 8000952:	4618      	mov	r0, r3
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	2000000c 	.word	0x2000000c
 8000960:	66666667 	.word	0x66666667

08000964 <display_led_yellow>:
 enum ButtonState display_led_yellow(int time)
  {
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 	 int flag1 = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]
 	 int flag2 = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	61bb      	str	r3, [r7, #24]
 	 int chuc;
 	 int donvi;
 	 int dem;
 	 if(flag1==0 && flag2==0)
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d169      	bne.n	8000a4e <display_led_yellow+0xea>
 800097a:	69bb      	ldr	r3, [r7, #24]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d166      	bne.n	8000a4e <display_led_yellow+0xea>
 	 {
 		 for(dem=time;dem>=0;dem--)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	e060      	b.n	8000a48 <display_led_yellow+0xe4>
 		 {
 	  	      chuc = dem/10;
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	4a48      	ldr	r2, [pc, #288]	; (8000aac <display_led_yellow+0x148>)
 800098a:	fb82 1203 	smull	r1, r2, r2, r3
 800098e:	1092      	asrs	r2, r2, #2
 8000990:	17db      	asrs	r3, r3, #31
 8000992:	1ad3      	subs	r3, r2, r3
 8000994:	60fb      	str	r3, [r7, #12]
 	  	  	  donvi = dem%10;
 8000996:	697a      	ldr	r2, [r7, #20]
 8000998:	4b44      	ldr	r3, [pc, #272]	; (8000aac <display_led_yellow+0x148>)
 800099a:	fb83 1302 	smull	r1, r3, r3, r2
 800099e:	1099      	asrs	r1, r3, #2
 80009a0:	17d3      	asrs	r3, r2, #31
 80009a2:	1ac9      	subs	r1, r1, r3
 80009a4:	460b      	mov	r3, r1
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	440b      	add	r3, r1
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	60bb      	str	r3, [r7, #8]
 			  if(flag1==1 || flag2==1) break;
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d04b      	beq.n	8000a4e <display_led_yellow+0xea>
 80009b6:	69bb      	ldr	r3, [r7, #24]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d048      	beq.n	8000a4e <display_led_yellow+0xea>
 			  for(int j=0;j<DELAY_TIME;j++)
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	e03c      	b.n	8000a3c <display_led_yellow+0xd8>
 			  {
 				  if(is_button_pressed(0)){
 80009c2:	2000      	movs	r0, #0
 80009c4:	f000 fb52 	bl	800106c <is_button_pressed>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d002      	beq.n	80009d4 <display_led_yellow+0x70>
 				  	flag1 = 1;
 80009ce:	2301      	movs	r3, #1
 80009d0:	61fb      	str	r3, [r7, #28]
 				  	break;
 80009d2:	e036      	b.n	8000a42 <display_led_yellow+0xde>
 				  }

 				  if(is_button_pressed(1)){
 80009d4:	2001      	movs	r0, #1
 80009d6:	f000 fb49 	bl	800106c <is_button_pressed>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d002      	beq.n	80009e6 <display_led_yellow+0x82>
 				  	flag2 = 1;
 80009e0:	2301      	movs	r3, #1
 80009e2:	61bb      	str	r3, [r7, #24]
 				  	break;
 80009e4:	e02d      	b.n	8000a42 <display_led_yellow+0xde>
 				  }
 				  	display7SEG(1, 0);
 80009e6:	2100      	movs	r1, #0
 80009e8:	2001      	movs	r0, #1
 80009ea:	f7ff fbd9 	bl	80001a0 <display7SEG>
 				  	HAL_Delay(1);
 80009ee:	2001      	movs	r0, #1
 80009f0:	f000 fdb2 	bl	8001558 <HAL_Delay>
 				  	turn_off_7seg(1);
 80009f4:	2001      	movs	r0, #1
 80009f6:	f7ff fba9 	bl	800014c <turn_off_7seg>

 				    display7SEG(2, 2);
 80009fa:	2102      	movs	r1, #2
 80009fc:	2002      	movs	r0, #2
 80009fe:	f7ff fbcf 	bl	80001a0 <display7SEG>
 				  	HAL_Delay(1);
 8000a02:	2001      	movs	r0, #1
 8000a04:	f000 fda8 	bl	8001558 <HAL_Delay>
 				  	turn_off_7seg(2);
 8000a08:	2002      	movs	r0, #2
 8000a0a:	f7ff fb9f 	bl	800014c <turn_off_7seg>

 				  	display7SEG(3, chuc);
 8000a0e:	68f9      	ldr	r1, [r7, #12]
 8000a10:	2003      	movs	r0, #3
 8000a12:	f7ff fbc5 	bl	80001a0 <display7SEG>
 				  	HAL_Delay(10);
 8000a16:	200a      	movs	r0, #10
 8000a18:	f000 fd9e 	bl	8001558 <HAL_Delay>
 				  	turn_off_7seg(3);
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f7ff fb95 	bl	800014c <turn_off_7seg>

 				  	display7SEG(4, donvi);
 8000a22:	68b9      	ldr	r1, [r7, #8]
 8000a24:	2004      	movs	r0, #4
 8000a26:	f7ff fbbb 	bl	80001a0 <display7SEG>
 				  	HAL_Delay(10);
 8000a2a:	200a      	movs	r0, #10
 8000a2c:	f000 fd94 	bl	8001558 <HAL_Delay>
 				  	turn_off_7seg(4);
 8000a30:	2004      	movs	r0, #4
 8000a32:	f7ff fb8b 	bl	800014c <turn_off_7seg>
 			  for(int j=0;j<DELAY_TIME;j++)
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	2b13      	cmp	r3, #19
 8000a40:	ddbf      	ble.n	80009c2 <display_led_yellow+0x5e>
 		 for(dem=time;dem>=0;dem--)
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	3b01      	subs	r3, #1
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	da9b      	bge.n	8000986 <display_led_yellow+0x22>
 			  }
 		 }
 	 }
 	  HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a54:	4816      	ldr	r0, [pc, #88]	; (8000ab0 <display_led_yellow+0x14c>)
 8000a56:	f001 f842 	bl	8001ade <HAL_GPIO_WritePin>
 	  HAL_Delay(20);
 8000a5a:	2014      	movs	r0, #20
 8000a5c:	f000 fd7c 	bl	8001558 <HAL_Delay>
 	  HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a66:	4812      	ldr	r0, [pc, #72]	; (8000ab0 <display_led_yellow+0x14c>)
 8000a68:	f001 f839 	bl	8001ade <HAL_GPIO_WritePin>
 	  HAL_Delay(50);
 8000a6c:	2032      	movs	r0, #50	; 0x32
 8000a6e:	f000 fd73 	bl	8001558 <HAL_Delay>

 	  	if(flag1==0&&flag2==0) return MODE_2;
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d104      	bne.n	8000a82 <display_led_yellow+0x11e>
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d101      	bne.n	8000a82 <display_led_yellow+0x11e>
 8000a7e:	2302      	movs	r3, #2
 8000a80:	e010      	b.n	8000aa4 <display_led_yellow+0x140>
 		else if(flag1==1 && flag2==0) return MODE_3;
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d104      	bne.n	8000a92 <display_led_yellow+0x12e>
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d101      	bne.n	8000a92 <display_led_yellow+0x12e>
 8000a8e:	2303      	movs	r3, #3
 8000a90:	e008      	b.n	8000aa4 <display_led_yellow+0x140>
 		else if(flag1==0 && flag2==1) return  M2_BTN2;
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d104      	bne.n	8000aa2 <display_led_yellow+0x13e>
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d101      	bne.n	8000aa2 <display_led_yellow+0x13e>
 8000a9e:	2306      	movs	r3, #6
 8000aa0:	e000      	b.n	8000aa4 <display_led_yellow+0x140>
 		else return MODE_0;
 8000aa2:	2300      	movs	r3, #0
  }
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3720      	adds	r7, #32
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	66666667 	.word	0x66666667
 8000ab0:	40010800 	.word	0x40010800

08000ab4 <display_counter_yellow>:
 enum ButtonState display_counter_yellow()
 {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
		 int donvi;

		 int dem;


			 dem = count_yellow;
 8000aba:	4b34      	ldr	r3, [pc, #208]	; (8000b8c <display_counter_yellow+0xd8>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	60bb      	str	r3, [r7, #8]
			 chuc = dem/10;
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	4a33      	ldr	r2, [pc, #204]	; (8000b90 <display_counter_yellow+0xdc>)
 8000ac4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ac8:	1092      	asrs	r2, r2, #2
 8000aca:	17db      	asrs	r3, r3, #31
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	607b      	str	r3, [r7, #4]
			 donvi = dem%10;
 8000ad0:	68ba      	ldr	r2, [r7, #8]
 8000ad2:	4b2f      	ldr	r3, [pc, #188]	; (8000b90 <display_counter_yellow+0xdc>)
 8000ad4:	fb83 1302 	smull	r1, r3, r3, r2
 8000ad8:	1099      	asrs	r1, r3, #2
 8000ada:	17d3      	asrs	r3, r2, #31
 8000adc:	1ac9      	subs	r1, r1, r3
 8000ade:	460b      	mov	r3, r1
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	440b      	add	r3, r1
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	603b      	str	r3, [r7, #0]

			  for(int j=0;j<8;j++)
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	e02a      	b.n	8000b46 <display_counter_yellow+0x92>
			  {
				  	display7SEG(1, 0);
 8000af0:	2100      	movs	r1, #0
 8000af2:	2001      	movs	r0, #1
 8000af4:	f7ff fb54 	bl	80001a0 <display7SEG>
				  	HAL_Delay(1);
 8000af8:	2001      	movs	r0, #1
 8000afa:	f000 fd2d 	bl	8001558 <HAL_Delay>
				  	turn_off_7seg(1);
 8000afe:	2001      	movs	r0, #1
 8000b00:	f7ff fb24 	bl	800014c <turn_off_7seg>

				    display7SEG(2, 2);
 8000b04:	2102      	movs	r1, #2
 8000b06:	2002      	movs	r0, #2
 8000b08:	f7ff fb4a 	bl	80001a0 <display7SEG>
				  	HAL_Delay(1);
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f000 fd23 	bl	8001558 <HAL_Delay>
				  	turn_off_7seg(2);
 8000b12:	2002      	movs	r0, #2
 8000b14:	f7ff fb1a 	bl	800014c <turn_off_7seg>

				  	display7SEG(3, chuc);
 8000b18:	6879      	ldr	r1, [r7, #4]
 8000b1a:	2003      	movs	r0, #3
 8000b1c:	f7ff fb40 	bl	80001a0 <display7SEG>
				  	HAL_Delay(10);
 8000b20:	200a      	movs	r0, #10
 8000b22:	f000 fd19 	bl	8001558 <HAL_Delay>
				  	turn_off_7seg(3);
 8000b26:	2003      	movs	r0, #3
 8000b28:	f7ff fb10 	bl	800014c <turn_off_7seg>

				  	display7SEG(4, donvi);
 8000b2c:	6839      	ldr	r1, [r7, #0]
 8000b2e:	2004      	movs	r0, #4
 8000b30:	f7ff fb36 	bl	80001a0 <display7SEG>
				  	HAL_Delay(10);
 8000b34:	200a      	movs	r0, #10
 8000b36:	f000 fd0f 	bl	8001558 <HAL_Delay>
				  	turn_off_7seg(4);
 8000b3a:	2004      	movs	r0, #4
 8000b3c:	f7ff fb06 	bl	800014c <turn_off_7seg>
			  for(int j=0;j<8;j++)
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	3301      	adds	r3, #1
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	2b07      	cmp	r3, #7
 8000b4a:	ddd1      	ble.n	8000af0 <display_counter_yellow+0x3c>
			  }
		if(is_button_pressed(2)) return M2_BTN3;
 8000b4c:	2002      	movs	r0, #2
 8000b4e:	f000 fa8d 	bl	800106c <is_button_pressed>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <display_counter_yellow+0xa8>
 8000b58:	2307      	movs	r3, #7
 8000b5a:	e012      	b.n	8000b82 <display_counter_yellow+0xce>
		if(is_button_pressed(1)){
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	f000 fa85 	bl	800106c <is_button_pressed>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d00b      	beq.n	8000b80 <display_counter_yellow+0xcc>
			count_yellow++;
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <display_counter_yellow+0xd8>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <display_counter_yellow+0xd8>)
 8000b70:	6013      	str	r3, [r2, #0]
			if(count_yellow>99) count_yellow = 0;
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <display_counter_yellow+0xd8>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b63      	cmp	r3, #99	; 0x63
 8000b78:	dd02      	ble.n	8000b80 <display_counter_yellow+0xcc>
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <display_counter_yellow+0xd8>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
		}

		 return M2_BTN2;
 8000b80:	2306      	movs	r3, #6
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000010 	.word	0x20000010
 8000b90:	66666667 	.word	0x66666667

08000b94 <display_led_green>:
 enum ButtonState display_led_green(int time)
   {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b088      	sub	sp, #32
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  	 int flag1 = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  	 int flag2 = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61bb      	str	r3, [r7, #24]
  	 int chuc;
  	 int donvi;
  	 int dem;
  	 if(flag1==0 && flag2==0)
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d169      	bne.n	8000c7e <display_led_green+0xea>
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d166      	bne.n	8000c7e <display_led_green+0xea>
  	 {
  		 for(dem=time;dem>=0;dem--)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	e060      	b.n	8000c78 <display_led_green+0xe4>
  		 {
  	  	      chuc = dem/10;
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	4a48      	ldr	r2, [pc, #288]	; (8000cdc <display_led_green+0x148>)
 8000bba:	fb82 1203 	smull	r1, r2, r2, r3
 8000bbe:	1092      	asrs	r2, r2, #2
 8000bc0:	17db      	asrs	r3, r3, #31
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	60fb      	str	r3, [r7, #12]
  	  	  	  donvi = dem%10;
 8000bc6:	697a      	ldr	r2, [r7, #20]
 8000bc8:	4b44      	ldr	r3, [pc, #272]	; (8000cdc <display_led_green+0x148>)
 8000bca:	fb83 1302 	smull	r1, r3, r3, r2
 8000bce:	1099      	asrs	r1, r3, #2
 8000bd0:	17d3      	asrs	r3, r2, #31
 8000bd2:	1ac9      	subs	r1, r1, r3
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	440b      	add	r3, r1
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	60bb      	str	r3, [r7, #8]
  			  if(flag1==1 || flag2==1) break;
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d04b      	beq.n	8000c7e <display_led_green+0xea>
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d048      	beq.n	8000c7e <display_led_green+0xea>
  			  for(int j=0;j<DELAY_TIME;j++)
 8000bec:	2300      	movs	r3, #0
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	e03c      	b.n	8000c6c <display_led_green+0xd8>
  			  {
  				  if(is_button_pressed(0)){
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f000 fa3a 	bl	800106c <is_button_pressed>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d002      	beq.n	8000c04 <display_led_green+0x70>
  				  	flag1 = 1;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	61fb      	str	r3, [r7, #28]
  				  	break;
 8000c02:	e036      	b.n	8000c72 <display_led_green+0xde>
  				  }

  				  if(is_button_pressed(1)){
 8000c04:	2001      	movs	r0, #1
 8000c06:	f000 fa31 	bl	800106c <is_button_pressed>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d002      	beq.n	8000c16 <display_led_green+0x82>
  				  	flag2 = 1;
 8000c10:	2301      	movs	r3, #1
 8000c12:	61bb      	str	r3, [r7, #24]
  				  	break;
 8000c14:	e02d      	b.n	8000c72 <display_led_green+0xde>
  				  }
  				  	display7SEG(1, 0);
 8000c16:	2100      	movs	r1, #0
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f7ff fac1 	bl	80001a0 <display7SEG>
  				  	HAL_Delay(1);
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f000 fc9a 	bl	8001558 <HAL_Delay>
  				  	turn_off_7seg(1);
 8000c24:	2001      	movs	r0, #1
 8000c26:	f7ff fa91 	bl	800014c <turn_off_7seg>

  				    display7SEG(2, 3);
 8000c2a:	2103      	movs	r1, #3
 8000c2c:	2002      	movs	r0, #2
 8000c2e:	f7ff fab7 	bl	80001a0 <display7SEG>
  				  	HAL_Delay(1);
 8000c32:	2001      	movs	r0, #1
 8000c34:	f000 fc90 	bl	8001558 <HAL_Delay>
  				  	turn_off_7seg(2);
 8000c38:	2002      	movs	r0, #2
 8000c3a:	f7ff fa87 	bl	800014c <turn_off_7seg>

  				  	display7SEG(3, chuc);
 8000c3e:	68f9      	ldr	r1, [r7, #12]
 8000c40:	2003      	movs	r0, #3
 8000c42:	f7ff faad 	bl	80001a0 <display7SEG>
  				  	HAL_Delay(10);
 8000c46:	200a      	movs	r0, #10
 8000c48:	f000 fc86 	bl	8001558 <HAL_Delay>
  				  	turn_off_7seg(3);
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f7ff fa7d 	bl	800014c <turn_off_7seg>

  				  	display7SEG(4, donvi);
 8000c52:	68b9      	ldr	r1, [r7, #8]
 8000c54:	2004      	movs	r0, #4
 8000c56:	f7ff faa3 	bl	80001a0 <display7SEG>
  				  	HAL_Delay(10);
 8000c5a:	200a      	movs	r0, #10
 8000c5c:	f000 fc7c 	bl	8001558 <HAL_Delay>
  				  	turn_off_7seg(4);
 8000c60:	2004      	movs	r0, #4
 8000c62:	f7ff fa73 	bl	800014c <turn_off_7seg>
  			  for(int j=0;j<DELAY_TIME;j++)
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	2b13      	cmp	r3, #19
 8000c70:	ddbf      	ble.n	8000bf2 <display_led_green+0x5e>
  		 for(dem=time;dem>=0;dem--)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3b01      	subs	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	da9b      	bge.n	8000bb6 <display_led_green+0x22>
  			  }
  		 }
  	 }
  	  HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c84:	4816      	ldr	r0, [pc, #88]	; (8000ce0 <display_led_green+0x14c>)
 8000c86:	f000 ff2a 	bl	8001ade <HAL_GPIO_WritePin>
  	  HAL_Delay(20);
 8000c8a:	2014      	movs	r0, #20
 8000c8c:	f000 fc64 	bl	8001558 <HAL_Delay>
  	  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c96:	4812      	ldr	r0, [pc, #72]	; (8000ce0 <display_led_green+0x14c>)
 8000c98:	f000 ff21 	bl	8001ade <HAL_GPIO_WritePin>
  	  HAL_Delay(50);
 8000c9c:	2032      	movs	r0, #50	; 0x32
 8000c9e:	f000 fc5b 	bl	8001558 <HAL_Delay>

  	  	if(flag1==0&&flag2==0) return MODE_3;
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d104      	bne.n	8000cb2 <display_led_green+0x11e>
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d101      	bne.n	8000cb2 <display_led_green+0x11e>
 8000cae:	2303      	movs	r3, #3
 8000cb0:	e010      	b.n	8000cd4 <display_led_green+0x140>
  		else if(flag1==1 && flag2==0) return MODE_0;
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d104      	bne.n	8000cc2 <display_led_green+0x12e>
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d101      	bne.n	8000cc2 <display_led_green+0x12e>
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e008      	b.n	8000cd4 <display_led_green+0x140>
  		else if(flag1==0 && flag2==1) return  M3_BTN2;
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d104      	bne.n	8000cd2 <display_led_green+0x13e>
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d101      	bne.n	8000cd2 <display_led_green+0x13e>
 8000cce:	2308      	movs	r3, #8
 8000cd0:	e000      	b.n	8000cd4 <display_led_green+0x140>
  		else return MODE_0;
 8000cd2:	2300      	movs	r3, #0
   }
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3720      	adds	r7, #32
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	66666667 	.word	0x66666667
 8000ce0:	40010800 	.word	0x40010800

08000ce4 <display_counter_green>:
 enum ButtonState display_counter_green()
  {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 		 int donvi;

 		 int dem;


 			 dem = count_green;
 8000cea:	4b34      	ldr	r3, [pc, #208]	; (8000dbc <display_counter_green+0xd8>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	60bb      	str	r3, [r7, #8]
 			 chuc = dem/10;
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	4a33      	ldr	r2, [pc, #204]	; (8000dc0 <display_counter_green+0xdc>)
 8000cf4:	fb82 1203 	smull	r1, r2, r2, r3
 8000cf8:	1092      	asrs	r2, r2, #2
 8000cfa:	17db      	asrs	r3, r3, #31
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	607b      	str	r3, [r7, #4]
 			 donvi = dem%10;
 8000d00:	68ba      	ldr	r2, [r7, #8]
 8000d02:	4b2f      	ldr	r3, [pc, #188]	; (8000dc0 <display_counter_green+0xdc>)
 8000d04:	fb83 1302 	smull	r1, r3, r3, r2
 8000d08:	1099      	asrs	r1, r3, #2
 8000d0a:	17d3      	asrs	r3, r2, #31
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	460b      	mov	r3, r1
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	440b      	add	r3, r1
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	603b      	str	r3, [r7, #0]

 			  for(int j=0;j<8;j++)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	e02a      	b.n	8000d76 <display_counter_green+0x92>
 			  {
 				  	display7SEG(1, 0);
 8000d20:	2100      	movs	r1, #0
 8000d22:	2001      	movs	r0, #1
 8000d24:	f7ff fa3c 	bl	80001a0 <display7SEG>
 				  	HAL_Delay(1);
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f000 fc15 	bl	8001558 <HAL_Delay>
 				  	turn_off_7seg(1);
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f7ff fa0c 	bl	800014c <turn_off_7seg>

 				    display7SEG(2, 3);
 8000d34:	2103      	movs	r1, #3
 8000d36:	2002      	movs	r0, #2
 8000d38:	f7ff fa32 	bl	80001a0 <display7SEG>
 				  	HAL_Delay(1);
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	f000 fc0b 	bl	8001558 <HAL_Delay>
 				  	turn_off_7seg(2);
 8000d42:	2002      	movs	r0, #2
 8000d44:	f7ff fa02 	bl	800014c <turn_off_7seg>

 				  	display7SEG(3, chuc);
 8000d48:	6879      	ldr	r1, [r7, #4]
 8000d4a:	2003      	movs	r0, #3
 8000d4c:	f7ff fa28 	bl	80001a0 <display7SEG>
 				  	HAL_Delay(10);
 8000d50:	200a      	movs	r0, #10
 8000d52:	f000 fc01 	bl	8001558 <HAL_Delay>
 				  	turn_off_7seg(3);
 8000d56:	2003      	movs	r0, #3
 8000d58:	f7ff f9f8 	bl	800014c <turn_off_7seg>

 				  	display7SEG(4, donvi);
 8000d5c:	6839      	ldr	r1, [r7, #0]
 8000d5e:	2004      	movs	r0, #4
 8000d60:	f7ff fa1e 	bl	80001a0 <display7SEG>
 				  	HAL_Delay(10);
 8000d64:	200a      	movs	r0, #10
 8000d66:	f000 fbf7 	bl	8001558 <HAL_Delay>
 				  	turn_off_7seg(4);
 8000d6a:	2004      	movs	r0, #4
 8000d6c:	f7ff f9ee 	bl	800014c <turn_off_7seg>
 			  for(int j=0;j<8;j++)
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	3301      	adds	r3, #1
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	2b07      	cmp	r3, #7
 8000d7a:	ddd1      	ble.n	8000d20 <display_counter_green+0x3c>
 			  }
 		if(is_button_pressed(2)) return M3_BTN3;
 8000d7c:	2002      	movs	r0, #2
 8000d7e:	f000 f975 	bl	800106c <is_button_pressed>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <display_counter_green+0xa8>
 8000d88:	2309      	movs	r3, #9
 8000d8a:	e012      	b.n	8000db2 <display_counter_green+0xce>
 		if(is_button_pressed(1)){
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	f000 f96d 	bl	800106c <is_button_pressed>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d00b      	beq.n	8000db0 <display_counter_green+0xcc>
 			count_green++;
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <display_counter_green+0xd8>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <display_counter_green+0xd8>)
 8000da0:	6013      	str	r3, [r2, #0]
 			if(count_green>99) count_green = 0;
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <display_counter_green+0xd8>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b63      	cmp	r3, #99	; 0x63
 8000da8:	dd02      	ble.n	8000db0 <display_counter_green+0xcc>
 8000daa:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <display_counter_green+0xd8>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 		}

 		 return M3_BTN2;
 8000db0:	2308      	movs	r3, #8
 }
 8000db2:	4618      	mov	r0, r3
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000014 	.word	0x20000014
 8000dc0:	66666667 	.word	0x66666667

08000dc4 <fsm_for_input_processing>:
 void fsm_for_input_processing (){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0

	switch(buttonState)
 8000dc8:	4b5c      	ldr	r3, [pc, #368]	; (8000f3c <fsm_for_input_processing+0x178>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b09      	cmp	r3, #9
 8000dce:	f200 80b2 	bhi.w	8000f36 <fsm_for_input_processing+0x172>
 8000dd2:	a201      	add	r2, pc, #4	; (adr r2, 8000dd8 <fsm_for_input_processing+0x14>)
 8000dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd8:	08000e01 	.word	0x08000e01
 8000ddc:	08000e3b 	.word	0x08000e3b
 8000de0:	08000e8f 	.word	0x08000e8f
 8000de4:	08000ee3 	.word	0x08000ee3
 8000de8:	08000e55 	.word	0x08000e55
 8000dec:	08000e67 	.word	0x08000e67
 8000df0:	08000ea9 	.word	0x08000ea9
 8000df4:	08000ebb 	.word	0x08000ebb
 8000df8:	08000efd 	.word	0x08000efd
 8000dfc:	08000f0f 	.word	0x08000f0f
		  {
		  case MODE_0:
			  turn_off_all_led();
 8000e00:	f000 f94e 	bl	80010a0 <turn_off_all_led>
			  display_mode(0);
 8000e04:	2000      	movs	r0, #0
 8000e06:	f7ff fa65 	bl	80002d4 <display_mode>
			  yellow_time = red_time - green_time;
 8000e0a:	4b4d      	ldr	r3, [pc, #308]	; (8000f40 <fsm_for_input_processing+0x17c>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	4b4d      	ldr	r3, [pc, #308]	; (8000f44 <fsm_for_input_processing+0x180>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	4a4c      	ldr	r2, [pc, #304]	; (8000f48 <fsm_for_input_processing+0x184>)
 8000e16:	6013      	str	r3, [r2, #0]
			  buttonState = display_led_normal(red_time,green_time, yellow_time);
 8000e18:	4b49      	ldr	r3, [pc, #292]	; (8000f40 <fsm_for_input_processing+0x17c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a49      	ldr	r2, [pc, #292]	; (8000f44 <fsm_for_input_processing+0x180>)
 8000e1e:	6811      	ldr	r1, [r2, #0]
 8000e20:	4a49      	ldr	r2, [pc, #292]	; (8000f48 <fsm_for_input_processing+0x184>)
 8000e22:	6812      	ldr	r2, [r2, #0]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fb09 	bl	800043c <display_led_normal>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b43      	ldr	r3, [pc, #268]	; (8000f3c <fsm_for_input_processing+0x178>)
 8000e30:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(30);
 8000e32:	201e      	movs	r0, #30
 8000e34:	f000 fb90 	bl	8001558 <HAL_Delay>
			 break;
 8000e38:	e07d      	b.n	8000f36 <fsm_for_input_processing+0x172>

		//====== MODE 1 ===== //

		  case MODE_1:

			  turn_off_all_led();
 8000e3a:	f000 f931 	bl	80010a0 <turn_off_all_led>
			  display_mode(1);
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f7ff fa48 	bl	80002d4 <display_mode>
			  buttonState = display_led_red(5);
 8000e44:	2005      	movs	r0, #5
 8000e46:	f7ff fc75 	bl	8000734 <display_led_red>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4b3b      	ldr	r3, [pc, #236]	; (8000f3c <fsm_for_input_processing+0x178>)
 8000e50:	701a      	strb	r2, [r3, #0]
			 break;
 8000e52:	e070      	b.n	8000f36 <fsm_for_input_processing+0x172>
		  case M1_BTN2:
			  turn_off_all_led();
 8000e54:	f000 f924 	bl	80010a0 <turn_off_all_led>
			  buttonState = display_counter_red();
 8000e58:	f7ff fd14 	bl	8000884 <display_counter_red>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b36      	ldr	r3, [pc, #216]	; (8000f3c <fsm_for_input_processing+0x178>)
 8000e62:	701a      	strb	r2, [r3, #0]
			  break;
 8000e64:	e067      	b.n	8000f36 <fsm_for_input_processing+0x172>

		  case M1_BTN3:
			  turn_off_all_led();
 8000e66:	f000 f91b 	bl	80010a0 <turn_off_all_led>
			  if(is_button_pressed(2))
 8000e6a:	2002      	movs	r0, #2
 8000e6c:	f000 f8fe 	bl	800106c <is_button_pressed>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d007      	beq.n	8000e86 <fsm_for_input_processing+0xc2>
			  {
				  red_time = count_red;
 8000e76:	4b35      	ldr	r3, [pc, #212]	; (8000f4c <fsm_for_input_processing+0x188>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a31      	ldr	r2, [pc, #196]	; (8000f40 <fsm_for_input_processing+0x17c>)
 8000e7c:	6013      	str	r3, [r2, #0]
				  buttonState = MODE_1;
 8000e7e:	4b2f      	ldr	r3, [pc, #188]	; (8000f3c <fsm_for_input_processing+0x178>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	701a      	strb	r2, [r3, #0]
			  }
			  else{
				  buttonState = M1_BTN3;
			  }
			  break;
 8000e84:	e057      	b.n	8000f36 <fsm_for_input_processing+0x172>
				  buttonState = M1_BTN3;
 8000e86:	4b2d      	ldr	r3, [pc, #180]	; (8000f3c <fsm_for_input_processing+0x178>)
 8000e88:	2205      	movs	r2, #5
 8000e8a:	701a      	strb	r2, [r3, #0]
			  break;
 8000e8c:	e053      	b.n	8000f36 <fsm_for_input_processing+0x172>

		//====== MODE 2 ===== //

		  case MODE_2:

			  turn_off_all_led();
 8000e8e:	f000 f907 	bl	80010a0 <turn_off_all_led>
			  display_mode(2);
 8000e92:	2002      	movs	r0, #2
 8000e94:	f7ff fa1e 	bl	80002d4 <display_mode>
			  buttonState = display_led_yellow(5);
 8000e98:	2005      	movs	r0, #5
 8000e9a:	f7ff fd63 	bl	8000964 <display_led_yellow>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b26      	ldr	r3, [pc, #152]	; (8000f3c <fsm_for_input_processing+0x178>)
 8000ea4:	701a      	strb	r2, [r3, #0]
			  break;
 8000ea6:	e046      	b.n	8000f36 <fsm_for_input_processing+0x172>
		  case M2_BTN2:
			  turn_off_all_led();
 8000ea8:	f000 f8fa 	bl	80010a0 <turn_off_all_led>
			  buttonState = display_counter_yellow();
 8000eac:	f7ff fe02 	bl	8000ab4 <display_counter_yellow>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <fsm_for_input_processing+0x178>)
 8000eb6:	701a      	strb	r2, [r3, #0]
			  break;
 8000eb8:	e03d      	b.n	8000f36 <fsm_for_input_processing+0x172>

		  case M2_BTN3:
			  turn_off_all_led();
 8000eba:	f000 f8f1 	bl	80010a0 <turn_off_all_led>
			  if(is_button_pressed(2))
 8000ebe:	2002      	movs	r0, #2
 8000ec0:	f000 f8d4 	bl	800106c <is_button_pressed>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d007      	beq.n	8000eda <fsm_for_input_processing+0x116>
			  {
				  yellow_time = count_yellow;
 8000eca:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <fsm_for_input_processing+0x18c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a1e      	ldr	r2, [pc, #120]	; (8000f48 <fsm_for_input_processing+0x184>)
 8000ed0:	6013      	str	r3, [r2, #0]
				  buttonState = MODE_2;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <fsm_for_input_processing+0x178>)
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	701a      	strb	r2, [r3, #0]
			  }
			  else{
				  buttonState = M2_BTN3;
			  }
			  break;
 8000ed8:	e02d      	b.n	8000f36 <fsm_for_input_processing+0x172>
				  buttonState = M2_BTN3;
 8000eda:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <fsm_for_input_processing+0x178>)
 8000edc:	2207      	movs	r2, #7
 8000ede:	701a      	strb	r2, [r3, #0]
			  break;
 8000ee0:	e029      	b.n	8000f36 <fsm_for_input_processing+0x172>


		//====== MODE 3 ===== //

		  case MODE_3:
			  turn_off_all_led();
 8000ee2:	f000 f8dd 	bl	80010a0 <turn_off_all_led>
			  display_mode(3);
 8000ee6:	2003      	movs	r0, #3
 8000ee8:	f7ff f9f4 	bl	80002d4 <display_mode>
			  buttonState = display_led_green(5);
 8000eec:	2005      	movs	r0, #5
 8000eee:	f7ff fe51 	bl	8000b94 <display_led_green>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <fsm_for_input_processing+0x178>)
 8000ef8:	701a      	strb	r2, [r3, #0]
			  break;
 8000efa:	e01c      	b.n	8000f36 <fsm_for_input_processing+0x172>


		  case M3_BTN2:
			  turn_off_all_led();
 8000efc:	f000 f8d0 	bl	80010a0 <turn_off_all_led>
			  buttonState = display_counter_green();
 8000f00:	f7ff fef0 	bl	8000ce4 <display_counter_green>
 8000f04:	4603      	mov	r3, r0
 8000f06:	461a      	mov	r2, r3
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <fsm_for_input_processing+0x178>)
 8000f0a:	701a      	strb	r2, [r3, #0]
			  break;
 8000f0c:	e013      	b.n	8000f36 <fsm_for_input_processing+0x172>

		  case M3_BTN3:
			  turn_off_all_led();
 8000f0e:	f000 f8c7 	bl	80010a0 <turn_off_all_led>
			  if(is_button_pressed(2))
 8000f12:	2002      	movs	r0, #2
 8000f14:	f000 f8aa 	bl	800106c <is_button_pressed>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d007      	beq.n	8000f2e <fsm_for_input_processing+0x16a>
			  {
				  green_time = count_green;
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <fsm_for_input_processing+0x190>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a08      	ldr	r2, [pc, #32]	; (8000f44 <fsm_for_input_processing+0x180>)
 8000f24:	6013      	str	r3, [r2, #0]
				  buttonState = MODE_3;
 8000f26:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <fsm_for_input_processing+0x178>)
 8000f28:	2203      	movs	r2, #3
 8000f2a:	701a      	strb	r2, [r3, #0]
			  }
			  else{
				  buttonState = M3_BTN3;
			  }
			  break;
 8000f2c:	e002      	b.n	8000f34 <fsm_for_input_processing+0x170>
				  buttonState = M3_BTN3;
 8000f2e:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <fsm_for_input_processing+0x178>)
 8000f30:	2209      	movs	r2, #9
 8000f32:	701a      	strb	r2, [r3, #0]
			  break;
 8000f34:	bf00      	nop


		  }

}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000040 	.word	0x20000040
 8000f40:	20000000 	.word	0x20000000
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000004 	.word	0x20000004
 8000f4c:	2000000c 	.word	0x2000000c
 8000f50:	20000010 	.word	0x20000010
 8000f54:	20000014 	.word	0x20000014

08000f58 <button_reading>:

static uint8_t  flagForButtonPress1s[NO_OF_BUTTONS];
static uint16_t counterForButtonPress1s[NO_OF_BUTTONS];

void button_reading(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
	for( int i=0;i<NO_OF_BUTTONS;i++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	e06f      	b.n	8001044 <button_reading+0xec>
	{
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000f64:	4a3b      	ldr	r2, [pc, #236]	; (8001054 <button_reading+0xfc>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	7819      	ldrb	r1, [r3, #0]
 8000f6c:	4a3a      	ldr	r2, [pc, #232]	; (8001058 <button_reading+0x100>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	460a      	mov	r2, r1
 8000f74:	701a      	strb	r2, [r3, #0]
		if(i==0)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10a      	bne.n	8000f92 <button_reading+0x3a>
		{
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,BUTTON_1_Pin);
 8000f7c:	2120      	movs	r1, #32
 8000f7e:	4837      	ldr	r0, [pc, #220]	; (800105c <button_reading+0x104>)
 8000f80:	f000 fd96 	bl	8001ab0 <HAL_GPIO_ReadPin>
 8000f84:	4603      	mov	r3, r0
 8000f86:	4619      	mov	r1, r3
 8000f88:	4a32      	ldr	r2, [pc, #200]	; (8001054 <button_reading+0xfc>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	460a      	mov	r2, r1
 8000f90:	701a      	strb	r2, [r3, #0]
		}
		if (i==1)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d10a      	bne.n	8000fae <button_reading+0x56>
		{
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port,BUTTON_2_Pin);
 8000f98:	2140      	movs	r1, #64	; 0x40
 8000f9a:	4830      	ldr	r0, [pc, #192]	; (800105c <button_reading+0x104>)
 8000f9c:	f000 fd88 	bl	8001ab0 <HAL_GPIO_ReadPin>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4a2b      	ldr	r2, [pc, #172]	; (8001054 <button_reading+0xfc>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	460a      	mov	r2, r1
 8000fac:	701a      	strb	r2, [r3, #0]
		}
		if (i==2)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d10a      	bne.n	8000fca <button_reading+0x72>
		{
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port,BUTTON_3_Pin);
 8000fb4:	2180      	movs	r1, #128	; 0x80
 8000fb6:	4829      	ldr	r0, [pc, #164]	; (800105c <button_reading+0x104>)
 8000fb8:	f000 fd7a 	bl	8001ab0 <HAL_GPIO_ReadPin>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4a24      	ldr	r2, [pc, #144]	; (8001054 <button_reading+0xfc>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	460a      	mov	r2, r1
 8000fc8:	701a      	strb	r2, [r3, #0]
		}

		if(debounceButtonBuffer1[i]==debounceButtonBuffer2[i])
 8000fca:	4a22      	ldr	r2, [pc, #136]	; (8001054 <button_reading+0xfc>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4413      	add	r3, r2
 8000fd0:	781a      	ldrb	r2, [r3, #0]
 8000fd2:	4921      	ldr	r1, [pc, #132]	; (8001058 <button_reading+0x100>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	440b      	add	r3, r1
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d108      	bne.n	8000ff0 <button_reading+0x98>
		{
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000fde:	4a1d      	ldr	r2, [pc, #116]	; (8001054 <button_reading+0xfc>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	7819      	ldrb	r1, [r3, #0]
 8000fe6:	4a1e      	ldr	r2, [pc, #120]	; (8001060 <button_reading+0x108>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4413      	add	r3, r2
 8000fec:	460a      	mov	r2, r1
 8000fee:	701a      	strb	r2, [r3, #0]
		}

		if(buttonBuffer[i]==BUTTON_IS_PRESSED)
 8000ff0:	4a1b      	ldr	r2, [pc, #108]	; (8001060 <button_reading+0x108>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d116      	bne.n	800102a <button_reading+0xd2>
		{
			if( counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING )
 8000ffc:	4a19      	ldr	r2, [pc, #100]	; (8001064 <button_reading+0x10c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001004:	2b63      	cmp	r3, #99	; 0x63
 8001006:	d80a      	bhi.n	800101e <button_reading+0xc6>
			{
				counterForButtonPress1s[i]++;
 8001008:	4a16      	ldr	r2, [pc, #88]	; (8001064 <button_reading+0x10c>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001010:	3301      	adds	r3, #1
 8001012:	b299      	uxth	r1, r3
 8001014:	4a13      	ldr	r2, [pc, #76]	; (8001064 <button_reading+0x10c>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800101c:	e00f      	b.n	800103e <button_reading+0xe6>
			} else{
				// the flag is turned on when 1 second has passed
				flagForButtonPress1s[i] = 1;
 800101e:	4a12      	ldr	r2, [pc, #72]	; (8001068 <button_reading+0x110>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4413      	add	r3, r2
 8001024:	2201      	movs	r2, #1
 8001026:	701a      	strb	r2, [r3, #0]
 8001028:	e009      	b.n	800103e <button_reading+0xe6>

				// do something here
			}
		}
		else {
			counterForButtonPress1s[i] = 0;
 800102a:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <button_reading+0x10c>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2100      	movs	r1, #0
 8001030:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 8001034:	4a0c      	ldr	r2, [pc, #48]	; (8001068 <button_reading+0x110>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
	for( int i=0;i<NO_OF_BUTTONS;i++)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3301      	adds	r3, #1
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b02      	cmp	r3, #2
 8001048:	dd8c      	ble.n	8000f64 <button_reading+0xc>
		}
	}
}
 800104a:	bf00      	nop
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000048 	.word	0x20000048
 8001058:	2000004c 	.word	0x2000004c
 800105c:	40010800 	.word	0x40010800
 8001060:	20000044 	.word	0x20000044
 8001064:	20000054 	.word	0x20000054
 8001068:	20000050 	.word	0x20000050

0800106c <is_button_pressed>:

unsigned char is_button_pressed (uint8_t index){
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
	if( index >= NO_OF_BUTTONS ) return 0;
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	2b02      	cmp	r3, #2
 800107a:	d901      	bls.n	8001080 <is_button_pressed+0x14>
 800107c:	2300      	movs	r3, #0
 800107e:	e007      	b.n	8001090 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED );
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	4a06      	ldr	r2, [pc, #24]	; (800109c <is_button_pressed+0x30>)
 8001084:	5cd3      	ldrb	r3, [r2, r3]
 8001086:	2b00      	cmp	r3, #0
 8001088:	bf0c      	ite	eq
 800108a:	2301      	moveq	r3, #1
 800108c:	2300      	movne	r3, #0
 800108e:	b2db      	uxtb	r3, r3
}
 8001090:	4618      	mov	r0, r3
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000044 	.word	0x20000044

080010a0 <turn_off_all_led>:

int t,i,k,l,j,s,o;


void turn_off_all_led()
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010aa:	4811      	ldr	r0, [pc, #68]	; (80010f0 <turn_off_all_led+0x50>)
 80010ac:	f000 fd17 	bl	8001ade <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, GPIO_PIN_SET);
 80010b0:	2201      	movs	r2, #1
 80010b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b6:	480e      	ldr	r0, [pc, #56]	; (80010f0 <turn_off_all_led+0x50>)
 80010b8:	f000 fd11 	bl	8001ade <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c2:	480b      	ldr	r0, [pc, #44]	; (80010f0 <turn_off_all_led+0x50>)
 80010c4:	f000 fd0b 	bl	8001ade <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, GPIO_PIN_SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ce:	4808      	ldr	r0, [pc, #32]	; (80010f0 <turn_off_all_led+0x50>)
 80010d0:	f000 fd05 	bl	8001ade <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, GPIO_PIN_SET);
 80010d4:	2201      	movs	r2, #1
 80010d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <turn_off_all_led+0x50>)
 80010dc:	f000 fcff 	bl	8001ade <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_SET);
 80010e0:	2201      	movs	r2, #1
 80010e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e6:	4802      	ldr	r0, [pc, #8]	; (80010f0 <turn_off_all_led+0x50>)
 80010e8:	f000 fcf9 	bl	8001ade <HAL_GPIO_WritePin>
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40010800 	.word	0x40010800

080010f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f8:	f000 f9cc 	bl	8001494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010fc:	f000 f80c 	bl	8001118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001100:	f000 f892 	bl	8001228 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001104:	f000 f844 	bl	8001190 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(& htim2 );
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <main+0x20>)
 800110a:	f001 f939 	bl	8002380 <HAL_TIM_Base_Start_IT>
//	  fsm_for_input_processing();
//	  int tred = 12;
//	  int tgreen = 8;
//	  int tyellow = 12-8;
//	  display_nor(tred,tgreen,tyellow);
	  fsm_for_input_processing();
 800110e:	f7ff fe59 	bl	8000dc4 <fsm_for_input_processing>
 8001112:	e7fc      	b.n	800110e <main+0x1a>
 8001114:	20000078 	.word	0x20000078

08001118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b090      	sub	sp, #64	; 0x40
 800111c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111e:	f107 0318 	add.w	r3, r7, #24
 8001122:	2228      	movs	r2, #40	; 0x28
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f001 fce2 	bl	8002af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800113a:	2302      	movs	r3, #2
 800113c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800113e:	2301      	movs	r3, #1
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001142:	2310      	movs	r3, #16
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001146:	2300      	movs	r3, #0
 8001148:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114a:	f107 0318 	add.w	r3, r7, #24
 800114e:	4618      	mov	r0, r3
 8001150:	f000 fcde 	bl	8001b10 <HAL_RCC_OscConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800115a:	f000 f8d1 	bl	8001300 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115e:	230f      	movs	r3, #15
 8001160:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f000 ff4a 	bl	8002010 <HAL_RCC_ClockConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001182:	f000 f8bd 	bl	8001300 <Error_Handler>
  }
}
 8001186:	bf00      	nop
 8001188:	3740      	adds	r7, #64	; 0x40
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001196:	f107 0308 	add.w	r3, r7, #8
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a4:	463b      	mov	r3, r7
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011ac:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <MX_TIM2_Init+0x94>)
 80011ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <MX_TIM2_Init+0x94>)
 80011b6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80011ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <MX_TIM2_Init+0x94>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <MX_TIM2_Init+0x94>)
 80011c4:	2209      	movs	r2, #9
 80011c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c8:	4b16      	ldr	r3, [pc, #88]	; (8001224 <MX_TIM2_Init+0x94>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <MX_TIM2_Init+0x94>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011d4:	4813      	ldr	r0, [pc, #76]	; (8001224 <MX_TIM2_Init+0x94>)
 80011d6:	f001 f883 	bl	80022e0 <HAL_TIM_Base_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011e0:	f000 f88e 	bl	8001300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011ea:	f107 0308 	add.w	r3, r7, #8
 80011ee:	4619      	mov	r1, r3
 80011f0:	480c      	ldr	r0, [pc, #48]	; (8001224 <MX_TIM2_Init+0x94>)
 80011f2:	f001 fa19 	bl	8002628 <HAL_TIM_ConfigClockSource>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011fc:	f000 f880 	bl	8001300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001200:	2300      	movs	r3, #0
 8001202:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001208:	463b      	mov	r3, r7
 800120a:	4619      	mov	r1, r3
 800120c:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_TIM2_Init+0x94>)
 800120e:	f001 fbe1 	bl	80029d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001218:	f000 f872 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000078 	.word	0x20000078

08001228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122e:	f107 0310 	add.w	r3, r7, #16
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800123c:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <MX_GPIO_Init+0xcc>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a2c      	ldr	r2, [pc, #176]	; (80012f4 <MX_GPIO_Init+0xcc>)
 8001242:	f043 0320 	orr.w	r3, r3, #32
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b2a      	ldr	r3, [pc, #168]	; (80012f4 <MX_GPIO_Init+0xcc>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0320 	and.w	r3, r3, #32
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	4b27      	ldr	r3, [pc, #156]	; (80012f4 <MX_GPIO_Init+0xcc>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4a26      	ldr	r2, [pc, #152]	; (80012f4 <MX_GPIO_Init+0xcc>)
 800125a:	f043 0304 	orr.w	r3, r3, #4
 800125e:	6193      	str	r3, [r2, #24]
 8001260:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <MX_GPIO_Init+0xcc>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126c:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <MX_GPIO_Init+0xcc>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4a20      	ldr	r2, [pc, #128]	; (80012f4 <MX_GPIO_Init+0xcc>)
 8001272:	f043 0308 	orr.w	r3, r3, #8
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <MX_GPIO_Init+0xcc>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f003 0308 	and.w	r3, r3, #8
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001284:	2200      	movs	r2, #0
 8001286:	f643 711e 	movw	r1, #16158	; 0x3f1e
 800128a:	481b      	ldr	r0, [pc, #108]	; (80012f8 <MX_GPIO_Init+0xd0>)
 800128c:	f000 fc27 	bl	8001ade <HAL_GPIO_WritePin>
                          |LED1_RED_Pin|LED1_YELLOW_Pin|LED1_GREEN_Pin|LED2_RED_Pin
                          |LED2_YELLOW_Pin|LED2_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001290:	2200      	movs	r2, #0
 8001292:	21ff      	movs	r1, #255	; 0xff
 8001294:	4819      	ldr	r0, [pc, #100]	; (80012fc <MX_GPIO_Init+0xd4>)
 8001296:	f000 fc22 	bl	8001ade <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           LED1_RED_Pin LED1_YELLOW_Pin LED1_GREEN_Pin LED2_RED_Pin
                           LED2_YELLOW_Pin LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 800129a:	f643 731e 	movw	r3, #16158	; 0x3f1e
 800129e:	613b      	str	r3, [r7, #16]
                          |LED1_RED_Pin|LED1_YELLOW_Pin|LED1_GREEN_Pin|LED2_RED_Pin
                          |LED2_YELLOW_Pin|LED2_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a0:	2301      	movs	r3, #1
 80012a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2302      	movs	r3, #2
 80012aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ac:	f107 0310 	add.w	r3, r7, #16
 80012b0:	4619      	mov	r1, r3
 80012b2:	4811      	ldr	r0, [pc, #68]	; (80012f8 <MX_GPIO_Init+0xd0>)
 80012b4:	f000 fa82 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 80012b8:	23e0      	movs	r3, #224	; 0xe0
 80012ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c0:	2301      	movs	r3, #1
 80012c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	f107 0310 	add.w	r3, r7, #16
 80012c8:	4619      	mov	r1, r3
 80012ca:	480b      	ldr	r0, [pc, #44]	; (80012f8 <MX_GPIO_Init+0xd0>)
 80012cc:	f000 fa76 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80012d0:	23ff      	movs	r3, #255	; 0xff
 80012d2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2302      	movs	r3, #2
 80012de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	4619      	mov	r1, r3
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_GPIO_Init+0xd4>)
 80012e8:	f000 fa68 	bl	80017bc <HAL_GPIO_Init>

}
 80012ec:	bf00      	nop
 80012ee:	3720      	adds	r7, #32
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40010800 	.word	0x40010800
 80012fc:	40010c00 	.word	0x40010c00

08001300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001304:	b672      	cpsid	i
}
 8001306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001308:	e7fe      	b.n	8001308 <Error_Handler+0x8>
	...

0800130c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <HAL_MspInit+0x5c>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	4a14      	ldr	r2, [pc, #80]	; (8001368 <HAL_MspInit+0x5c>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6193      	str	r3, [r2, #24]
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_MspInit+0x5c>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <HAL_MspInit+0x5c>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <HAL_MspInit+0x5c>)
 8001330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001334:	61d3      	str	r3, [r2, #28]
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <HAL_MspInit+0x5c>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <HAL_MspInit+0x60>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	4a04      	ldr	r2, [pc, #16]	; (800136c <HAL_MspInit+0x60>)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135e:	bf00      	nop
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	40021000 	.word	0x40021000
 800136c:	40010000 	.word	0x40010000

08001370 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001380:	d113      	bne.n	80013aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <HAL_TIM_Base_MspInit+0x44>)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	4a0b      	ldr	r2, [pc, #44]	; (80013b4 <HAL_TIM_Base_MspInit+0x44>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	61d3      	str	r3, [r2, #28]
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <HAL_TIM_Base_MspInit+0x44>)
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2100      	movs	r1, #0
 800139e:	201c      	movs	r0, #28
 80013a0:	f000 f9d5 	bl	800174e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013a4:	201c      	movs	r0, #28
 80013a6:	f000 f9ee 	bl	8001786 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40021000 	.word	0x40021000

080013b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <NMI_Handler+0x4>

080013be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <HardFault_Handler+0x4>

080013c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <MemManage_Handler+0x4>

080013ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <BusFault_Handler+0x4>

080013d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <UsageFault_Handler+0x4>

080013d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr

080013e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr

080013ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr

080013fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013fe:	f000 f88f 	bl	8001520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <TIM2_IRQHandler+0x10>)
 800140e:	f001 f803 	bl	8002418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000078 	.word	0x20000078

0800141c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <HAL_TIM_PeriodElapsedCallback>:

# include "main.h"
# include "input_reading.h"

 void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef* htim )
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2 ){
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001438:	d101      	bne.n	800143e <HAL_TIM_PeriodElapsedCallback+0x16>
	button_reading ();
 800143a:	f7ff fd8d 	bl	8000f58 <button_reading>
	}
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001448:	480c      	ldr	r0, [pc, #48]	; (800147c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800144a:	490d      	ldr	r1, [pc, #52]	; (8001480 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800144c:	4a0d      	ldr	r2, [pc, #52]	; (8001484 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001450:	e002      	b.n	8001458 <LoopCopyDataInit>

08001452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001456:	3304      	adds	r3, #4

08001458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800145c:	d3f9      	bcc.n	8001452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001460:	4c0a      	ldr	r4, [pc, #40]	; (800148c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001464:	e001      	b.n	800146a <LoopFillZerobss>

08001466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001468:	3204      	adds	r2, #4

0800146a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800146c:	d3fb      	bcc.n	8001466 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800146e:	f7ff ffd5 	bl	800141c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001472:	f001 fb19 	bl	8002aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001476:	f7ff fe3d 	bl	80010f4 <main>
  bx lr
 800147a:	4770      	bx	lr
  ldr r0, =_sdata
 800147c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001480:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001484:	08002b4c 	.word	0x08002b4c
  ldr r2, =_sbss
 8001488:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 800148c:	200000c4 	.word	0x200000c4

08001490 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001490:	e7fe      	b.n	8001490 <ADC1_2_IRQHandler>
	...

08001494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_Init+0x28>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a07      	ldr	r2, [pc, #28]	; (80014bc <HAL_Init+0x28>)
 800149e:	f043 0310 	orr.w	r3, r3, #16
 80014a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a4:	2003      	movs	r0, #3
 80014a6:	f000 f947 	bl	8001738 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014aa:	200f      	movs	r0, #15
 80014ac:	f000 f808 	bl	80014c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b0:	f7ff ff2c 	bl	800130c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40022000 	.word	0x40022000

080014c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_InitTick+0x54>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_InitTick+0x58>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014da:	fbb2 f3f3 	udiv	r3, r2, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f95f 	bl	80017a2 <HAL_SYSTICK_Config>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00e      	b.n	800150c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b0f      	cmp	r3, #15
 80014f2:	d80a      	bhi.n	800150a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f4:	2200      	movs	r2, #0
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295
 80014fc:	f000 f927 	bl	800174e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001500:	4a06      	ldr	r2, [pc, #24]	; (800151c <HAL_InitTick+0x5c>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	e000      	b.n	800150c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000018 	.word	0x20000018
 8001518:	20000020 	.word	0x20000020
 800151c:	2000001c 	.word	0x2000001c

08001520 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <HAL_IncTick+0x1c>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_IncTick+0x20>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4413      	add	r3, r2
 8001530:	4a03      	ldr	r2, [pc, #12]	; (8001540 <HAL_IncTick+0x20>)
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	20000020 	.word	0x20000020
 8001540:	200000c0 	.word	0x200000c0

08001544 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return uwTick;
 8001548:	4b02      	ldr	r3, [pc, #8]	; (8001554 <HAL_GetTick+0x10>)
 800154a:	681b      	ldr	r3, [r3, #0]
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	200000c0 	.word	0x200000c0

08001558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001560:	f7ff fff0 	bl	8001544 <HAL_GetTick>
 8001564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001570:	d005      	beq.n	800157e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001572:	4b0a      	ldr	r3, [pc, #40]	; (800159c <HAL_Delay+0x44>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	461a      	mov	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4413      	add	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800157e:	bf00      	nop
 8001580:	f7ff ffe0 	bl	8001544 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	429a      	cmp	r2, r3
 800158e:	d8f7      	bhi.n	8001580 <HAL_Delay+0x28>
  {
  }
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000020 	.word	0x20000020

080015a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015bc:	4013      	ands	r3, r2
 80015be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d2:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	60d3      	str	r3, [r2, #12]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <__NVIC_GetPriorityGrouping+0x18>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	0a1b      	lsrs	r3, r3, #8
 80015f2:	f003 0307 	and.w	r3, r3, #7
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	2b00      	cmp	r3, #0
 8001614:	db0b      	blt.n	800162e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	f003 021f 	and.w	r2, r3, #31
 800161c:	4906      	ldr	r1, [pc, #24]	; (8001638 <__NVIC_EnableIRQ+0x34>)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	095b      	lsrs	r3, r3, #5
 8001624:	2001      	movs	r0, #1
 8001626:	fa00 f202 	lsl.w	r2, r0, r2
 800162a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	e000e100 	.word	0xe000e100

0800163c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	6039      	str	r1, [r7, #0]
 8001646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164c:	2b00      	cmp	r3, #0
 800164e:	db0a      	blt.n	8001666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	490c      	ldr	r1, [pc, #48]	; (8001688 <__NVIC_SetPriority+0x4c>)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	0112      	lsls	r2, r2, #4
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	440b      	add	r3, r1
 8001660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001664:	e00a      	b.n	800167c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4908      	ldr	r1, [pc, #32]	; (800168c <__NVIC_SetPriority+0x50>)
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	3b04      	subs	r3, #4
 8001674:	0112      	lsls	r2, r2, #4
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	440b      	add	r3, r1
 800167a:	761a      	strb	r2, [r3, #24]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000e100 	.word	0xe000e100
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001690:	b480      	push	{r7}
 8001692:	b089      	sub	sp, #36	; 0x24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f1c3 0307 	rsb	r3, r3, #7
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	bf28      	it	cs
 80016ae:	2304      	movcs	r3, #4
 80016b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3304      	adds	r3, #4
 80016b6:	2b06      	cmp	r3, #6
 80016b8:	d902      	bls.n	80016c0 <NVIC_EncodePriority+0x30>
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3b03      	subs	r3, #3
 80016be:	e000      	b.n	80016c2 <NVIC_EncodePriority+0x32>
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	f04f 32ff 	mov.w	r2, #4294967295
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43da      	mvns	r2, r3
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	401a      	ands	r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d8:	f04f 31ff 	mov.w	r1, #4294967295
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	fa01 f303 	lsl.w	r3, r1, r3
 80016e2:	43d9      	mvns	r1, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	4313      	orrs	r3, r2
         );
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3724      	adds	r7, #36	; 0x24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001704:	d301      	bcc.n	800170a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001706:	2301      	movs	r3, #1
 8001708:	e00f      	b.n	800172a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800170a:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <SysTick_Config+0x40>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3b01      	subs	r3, #1
 8001710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001712:	210f      	movs	r1, #15
 8001714:	f04f 30ff 	mov.w	r0, #4294967295
 8001718:	f7ff ff90 	bl	800163c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <SysTick_Config+0x40>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001722:	4b04      	ldr	r3, [pc, #16]	; (8001734 <SysTick_Config+0x40>)
 8001724:	2207      	movs	r2, #7
 8001726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	e000e010 	.word	0xe000e010

08001738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff ff2d 	bl	80015a0 <__NVIC_SetPriorityGrouping>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800174e:	b580      	push	{r7, lr}
 8001750:	b086      	sub	sp, #24
 8001752:	af00      	add	r7, sp, #0
 8001754:	4603      	mov	r3, r0
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
 800175a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001760:	f7ff ff42 	bl	80015e8 <__NVIC_GetPriorityGrouping>
 8001764:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	6978      	ldr	r0, [r7, #20]
 800176c:	f7ff ff90 	bl	8001690 <NVIC_EncodePriority>
 8001770:	4602      	mov	r2, r0
 8001772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff5f 	bl	800163c <__NVIC_SetPriority>
}
 800177e:	bf00      	nop
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	4603      	mov	r3, r0
 800178e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff35 	bl	8001604 <__NVIC_EnableIRQ>
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff ffa2 	bl	80016f4 <SysTick_Config>
 80017b0:	4603      	mov	r3, r0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017bc:	b480      	push	{r7}
 80017be:	b08b      	sub	sp, #44	; 0x2c
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017c6:	2300      	movs	r3, #0
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ca:	2300      	movs	r3, #0
 80017cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ce:	e148      	b.n	8001a62 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017d0:	2201      	movs	r2, #1
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	69fa      	ldr	r2, [r7, #28]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	f040 8137 	bne.w	8001a5c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	4aa3      	ldr	r2, [pc, #652]	; (8001a80 <HAL_GPIO_Init+0x2c4>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d05e      	beq.n	80018b6 <HAL_GPIO_Init+0xfa>
 80017f8:	4aa1      	ldr	r2, [pc, #644]	; (8001a80 <HAL_GPIO_Init+0x2c4>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d875      	bhi.n	80018ea <HAL_GPIO_Init+0x12e>
 80017fe:	4aa1      	ldr	r2, [pc, #644]	; (8001a84 <HAL_GPIO_Init+0x2c8>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d058      	beq.n	80018b6 <HAL_GPIO_Init+0xfa>
 8001804:	4a9f      	ldr	r2, [pc, #636]	; (8001a84 <HAL_GPIO_Init+0x2c8>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d86f      	bhi.n	80018ea <HAL_GPIO_Init+0x12e>
 800180a:	4a9f      	ldr	r2, [pc, #636]	; (8001a88 <HAL_GPIO_Init+0x2cc>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d052      	beq.n	80018b6 <HAL_GPIO_Init+0xfa>
 8001810:	4a9d      	ldr	r2, [pc, #628]	; (8001a88 <HAL_GPIO_Init+0x2cc>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d869      	bhi.n	80018ea <HAL_GPIO_Init+0x12e>
 8001816:	4a9d      	ldr	r2, [pc, #628]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d04c      	beq.n	80018b6 <HAL_GPIO_Init+0xfa>
 800181c:	4a9b      	ldr	r2, [pc, #620]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d863      	bhi.n	80018ea <HAL_GPIO_Init+0x12e>
 8001822:	4a9b      	ldr	r2, [pc, #620]	; (8001a90 <HAL_GPIO_Init+0x2d4>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d046      	beq.n	80018b6 <HAL_GPIO_Init+0xfa>
 8001828:	4a99      	ldr	r2, [pc, #612]	; (8001a90 <HAL_GPIO_Init+0x2d4>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d85d      	bhi.n	80018ea <HAL_GPIO_Init+0x12e>
 800182e:	2b12      	cmp	r3, #18
 8001830:	d82a      	bhi.n	8001888 <HAL_GPIO_Init+0xcc>
 8001832:	2b12      	cmp	r3, #18
 8001834:	d859      	bhi.n	80018ea <HAL_GPIO_Init+0x12e>
 8001836:	a201      	add	r2, pc, #4	; (adr r2, 800183c <HAL_GPIO_Init+0x80>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	080018b7 	.word	0x080018b7
 8001840:	08001891 	.word	0x08001891
 8001844:	080018a3 	.word	0x080018a3
 8001848:	080018e5 	.word	0x080018e5
 800184c:	080018eb 	.word	0x080018eb
 8001850:	080018eb 	.word	0x080018eb
 8001854:	080018eb 	.word	0x080018eb
 8001858:	080018eb 	.word	0x080018eb
 800185c:	080018eb 	.word	0x080018eb
 8001860:	080018eb 	.word	0x080018eb
 8001864:	080018eb 	.word	0x080018eb
 8001868:	080018eb 	.word	0x080018eb
 800186c:	080018eb 	.word	0x080018eb
 8001870:	080018eb 	.word	0x080018eb
 8001874:	080018eb 	.word	0x080018eb
 8001878:	080018eb 	.word	0x080018eb
 800187c:	080018eb 	.word	0x080018eb
 8001880:	08001899 	.word	0x08001899
 8001884:	080018ad 	.word	0x080018ad
 8001888:	4a82      	ldr	r2, [pc, #520]	; (8001a94 <HAL_GPIO_Init+0x2d8>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d013      	beq.n	80018b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800188e:	e02c      	b.n	80018ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	623b      	str	r3, [r7, #32]
          break;
 8001896:	e029      	b.n	80018ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	3304      	adds	r3, #4
 800189e:	623b      	str	r3, [r7, #32]
          break;
 80018a0:	e024      	b.n	80018ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	3308      	adds	r3, #8
 80018a8:	623b      	str	r3, [r7, #32]
          break;
 80018aa:	e01f      	b.n	80018ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	330c      	adds	r3, #12
 80018b2:	623b      	str	r3, [r7, #32]
          break;
 80018b4:	e01a      	b.n	80018ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d102      	bne.n	80018c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018be:	2304      	movs	r3, #4
 80018c0:	623b      	str	r3, [r7, #32]
          break;
 80018c2:	e013      	b.n	80018ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d105      	bne.n	80018d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018cc:	2308      	movs	r3, #8
 80018ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69fa      	ldr	r2, [r7, #28]
 80018d4:	611a      	str	r2, [r3, #16]
          break;
 80018d6:	e009      	b.n	80018ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018d8:	2308      	movs	r3, #8
 80018da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69fa      	ldr	r2, [r7, #28]
 80018e0:	615a      	str	r2, [r3, #20]
          break;
 80018e2:	e003      	b.n	80018ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018e4:	2300      	movs	r3, #0
 80018e6:	623b      	str	r3, [r7, #32]
          break;
 80018e8:	e000      	b.n	80018ec <HAL_GPIO_Init+0x130>
          break;
 80018ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	2bff      	cmp	r3, #255	; 0xff
 80018f0:	d801      	bhi.n	80018f6 <HAL_GPIO_Init+0x13a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	e001      	b.n	80018fa <HAL_GPIO_Init+0x13e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3304      	adds	r3, #4
 80018fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	2bff      	cmp	r3, #255	; 0xff
 8001900:	d802      	bhi.n	8001908 <HAL_GPIO_Init+0x14c>
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	e002      	b.n	800190e <HAL_GPIO_Init+0x152>
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	3b08      	subs	r3, #8
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	210f      	movs	r1, #15
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	fa01 f303 	lsl.w	r3, r1, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	401a      	ands	r2, r3
 8001920:	6a39      	ldr	r1, [r7, #32]
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	fa01 f303 	lsl.w	r3, r1, r3
 8001928:	431a      	orrs	r2, r3
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 8090 	beq.w	8001a5c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800193c:	4b56      	ldr	r3, [pc, #344]	; (8001a98 <HAL_GPIO_Init+0x2dc>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	4a55      	ldr	r2, [pc, #340]	; (8001a98 <HAL_GPIO_Init+0x2dc>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6193      	str	r3, [r2, #24]
 8001948:	4b53      	ldr	r3, [pc, #332]	; (8001a98 <HAL_GPIO_Init+0x2dc>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001954:	4a51      	ldr	r2, [pc, #324]	; (8001a9c <HAL_GPIO_Init+0x2e0>)
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	089b      	lsrs	r3, r3, #2
 800195a:	3302      	adds	r3, #2
 800195c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001960:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	220f      	movs	r2, #15
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	4013      	ands	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a49      	ldr	r2, [pc, #292]	; (8001aa0 <HAL_GPIO_Init+0x2e4>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d00d      	beq.n	800199c <HAL_GPIO_Init+0x1e0>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a48      	ldr	r2, [pc, #288]	; (8001aa4 <HAL_GPIO_Init+0x2e8>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d007      	beq.n	8001998 <HAL_GPIO_Init+0x1dc>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a47      	ldr	r2, [pc, #284]	; (8001aa8 <HAL_GPIO_Init+0x2ec>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d101      	bne.n	8001994 <HAL_GPIO_Init+0x1d8>
 8001990:	2302      	movs	r3, #2
 8001992:	e004      	b.n	800199e <HAL_GPIO_Init+0x1e2>
 8001994:	2303      	movs	r3, #3
 8001996:	e002      	b.n	800199e <HAL_GPIO_Init+0x1e2>
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <HAL_GPIO_Init+0x1e2>
 800199c:	2300      	movs	r3, #0
 800199e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a0:	f002 0203 	and.w	r2, r2, #3
 80019a4:	0092      	lsls	r2, r2, #2
 80019a6:	4093      	lsls	r3, r2
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019ae:	493b      	ldr	r1, [pc, #236]	; (8001a9c <HAL_GPIO_Init+0x2e0>)
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	089b      	lsrs	r3, r3, #2
 80019b4:	3302      	adds	r3, #2
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d006      	beq.n	80019d6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019c8:	4b38      	ldr	r3, [pc, #224]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4937      	ldr	r1, [pc, #220]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	600b      	str	r3, [r1, #0]
 80019d4:	e006      	b.n	80019e4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019d6:	4b35      	ldr	r3, [pc, #212]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	43db      	mvns	r3, r3
 80019de:	4933      	ldr	r1, [pc, #204]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d006      	beq.n	80019fe <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019f0:	4b2e      	ldr	r3, [pc, #184]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	492d      	ldr	r1, [pc, #180]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
 80019fc:	e006      	b.n	8001a0c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019fe:	4b2b      	ldr	r3, [pc, #172]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	4929      	ldr	r1, [pc, #164]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d006      	beq.n	8001a26 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a18:	4b24      	ldr	r3, [pc, #144]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	4923      	ldr	r1, [pc, #140]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	608b      	str	r3, [r1, #8]
 8001a24:	e006      	b.n	8001a34 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a26:	4b21      	ldr	r3, [pc, #132]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	491f      	ldr	r1, [pc, #124]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d006      	beq.n	8001a4e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a40:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	4919      	ldr	r1, [pc, #100]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	60cb      	str	r3, [r1, #12]
 8001a4c:	e006      	b.n	8001a5c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a4e:	4b17      	ldr	r3, [pc, #92]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 8001a50:	68da      	ldr	r2, [r3, #12]
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	4915      	ldr	r1, [pc, #84]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	3301      	adds	r3, #1
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f47f aeaf 	bne.w	80017d0 <HAL_GPIO_Init+0x14>
  }
}
 8001a72:	bf00      	nop
 8001a74:	bf00      	nop
 8001a76:	372c      	adds	r7, #44	; 0x2c
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	10320000 	.word	0x10320000
 8001a84:	10310000 	.word	0x10310000
 8001a88:	10220000 	.word	0x10220000
 8001a8c:	10210000 	.word	0x10210000
 8001a90:	10120000 	.word	0x10120000
 8001a94:	10110000 	.word	0x10110000
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40010000 	.word	0x40010000
 8001aa0:	40010800 	.word	0x40010800
 8001aa4:	40010c00 	.word	0x40010c00
 8001aa8:	40011000 	.word	0x40011000
 8001aac:	40010400 	.word	0x40010400

08001ab0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	887b      	ldrh	r3, [r7, #2]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d002      	beq.n	8001ace <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	73fb      	strb	r3, [r7, #15]
 8001acc:	e001      	b.n	8001ad2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr

08001ade <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	807b      	strh	r3, [r7, #2]
 8001aea:	4613      	mov	r3, r2
 8001aec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aee:	787b      	ldrb	r3, [r7, #1]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001af4:	887a      	ldrh	r2, [r7, #2]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001afa:	e003      	b.n	8001b04 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001afc:	887b      	ldrh	r3, [r7, #2]
 8001afe:	041a      	lsls	r2, r3, #16
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	611a      	str	r2, [r3, #16]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
	...

08001b10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e26c      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 8087 	beq.w	8001c3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b30:	4b92      	ldr	r3, [pc, #584]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 030c 	and.w	r3, r3, #12
 8001b38:	2b04      	cmp	r3, #4
 8001b3a:	d00c      	beq.n	8001b56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b3c:	4b8f      	ldr	r3, [pc, #572]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 030c 	and.w	r3, r3, #12
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d112      	bne.n	8001b6e <HAL_RCC_OscConfig+0x5e>
 8001b48:	4b8c      	ldr	r3, [pc, #560]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b54:	d10b      	bne.n	8001b6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b56:	4b89      	ldr	r3, [pc, #548]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d06c      	beq.n	8001c3c <HAL_RCC_OscConfig+0x12c>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d168      	bne.n	8001c3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e246      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b76:	d106      	bne.n	8001b86 <HAL_RCC_OscConfig+0x76>
 8001b78:	4b80      	ldr	r3, [pc, #512]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a7f      	ldr	r2, [pc, #508]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	e02e      	b.n	8001be4 <HAL_RCC_OscConfig+0xd4>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x98>
 8001b8e:	4b7b      	ldr	r3, [pc, #492]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a7a      	ldr	r2, [pc, #488]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	4b78      	ldr	r3, [pc, #480]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a77      	ldr	r2, [pc, #476]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	e01d      	b.n	8001be4 <HAL_RCC_OscConfig+0xd4>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bb0:	d10c      	bne.n	8001bcc <HAL_RCC_OscConfig+0xbc>
 8001bb2:	4b72      	ldr	r3, [pc, #456]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a71      	ldr	r2, [pc, #452]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	4b6f      	ldr	r3, [pc, #444]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a6e      	ldr	r2, [pc, #440]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	e00b      	b.n	8001be4 <HAL_RCC_OscConfig+0xd4>
 8001bcc:	4b6b      	ldr	r3, [pc, #428]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a6a      	ldr	r2, [pc, #424]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	4b68      	ldr	r3, [pc, #416]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a67      	ldr	r2, [pc, #412]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d013      	beq.n	8001c14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bec:	f7ff fcaa 	bl	8001544 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf4:	f7ff fca6 	bl	8001544 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b64      	cmp	r3, #100	; 0x64
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e1fa      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c06:	4b5d      	ldr	r3, [pc, #372]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0xe4>
 8001c12:	e014      	b.n	8001c3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7ff fc96 	bl	8001544 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c1c:	f7ff fc92 	bl	8001544 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b64      	cmp	r3, #100	; 0x64
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e1e6      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2e:	4b53      	ldr	r3, [pc, #332]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x10c>
 8001c3a:	e000      	b.n	8001c3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d063      	beq.n	8001d12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c4a:	4b4c      	ldr	r3, [pc, #304]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00b      	beq.n	8001c6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c56:	4b49      	ldr	r3, [pc, #292]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d11c      	bne.n	8001c9c <HAL_RCC_OscConfig+0x18c>
 8001c62:	4b46      	ldr	r3, [pc, #280]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d116      	bne.n	8001c9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6e:	4b43      	ldr	r3, [pc, #268]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d005      	beq.n	8001c86 <HAL_RCC_OscConfig+0x176>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d001      	beq.n	8001c86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e1ba      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c86:	4b3d      	ldr	r3, [pc, #244]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4939      	ldr	r1, [pc, #228]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9a:	e03a      	b.n	8001d12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d020      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ca4:	4b36      	ldr	r3, [pc, #216]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001caa:	f7ff fc4b 	bl	8001544 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb2:	f7ff fc47 	bl	8001544 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e19b      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc4:	4b2d      	ldr	r3, [pc, #180]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd0:	4b2a      	ldr	r3, [pc, #168]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4927      	ldr	r1, [pc, #156]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	600b      	str	r3, [r1, #0]
 8001ce4:	e015      	b.n	8001d12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ce6:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7ff fc2a 	bl	8001544 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf4:	f7ff fc26 	bl	8001544 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e17a      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d06:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d03a      	beq.n	8001d94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d019      	beq.n	8001d5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d26:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2c:	f7ff fc0a 	bl	8001544 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d34:	f7ff fc06 	bl	8001544 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e15a      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d46:	4b0d      	ldr	r3, [pc, #52]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f0      	beq.n	8001d34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d52:	2001      	movs	r0, #1
 8001d54:	f000 faa6 	bl	80022a4 <RCC_Delay>
 8001d58:	e01c      	b.n	8001d94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d60:	f7ff fbf0 	bl	8001544 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d66:	e00f      	b.n	8001d88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d68:	f7ff fbec 	bl	8001544 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d908      	bls.n	8001d88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e140      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
 8001d7a:	bf00      	nop
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	42420000 	.word	0x42420000
 8001d84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d88:	4b9e      	ldr	r3, [pc, #632]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1e9      	bne.n	8001d68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80a6 	beq.w	8001eee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001da2:	2300      	movs	r3, #0
 8001da4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da6:	4b97      	ldr	r3, [pc, #604]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10d      	bne.n	8001dce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db2:	4b94      	ldr	r3, [pc, #592]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	4a93      	ldr	r2, [pc, #588]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	61d3      	str	r3, [r2, #28]
 8001dbe:	4b91      	ldr	r3, [pc, #580]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dce:	4b8e      	ldr	r3, [pc, #568]	; (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d118      	bne.n	8001e0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dda:	4b8b      	ldr	r3, [pc, #556]	; (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a8a      	ldr	r2, [pc, #552]	; (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001de6:	f7ff fbad 	bl	8001544 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dee:	f7ff fba9 	bl	8001544 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b64      	cmp	r3, #100	; 0x64
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e0fd      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e00:	4b81      	ldr	r3, [pc, #516]	; (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0f0      	beq.n	8001dee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d106      	bne.n	8001e22 <HAL_RCC_OscConfig+0x312>
 8001e14:	4b7b      	ldr	r3, [pc, #492]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	4a7a      	ldr	r2, [pc, #488]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	6213      	str	r3, [r2, #32]
 8001e20:	e02d      	b.n	8001e7e <HAL_RCC_OscConfig+0x36e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10c      	bne.n	8001e44 <HAL_RCC_OscConfig+0x334>
 8001e2a:	4b76      	ldr	r3, [pc, #472]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	4a75      	ldr	r2, [pc, #468]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	6213      	str	r3, [r2, #32]
 8001e36:	4b73      	ldr	r3, [pc, #460]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	4a72      	ldr	r2, [pc, #456]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001e3c:	f023 0304 	bic.w	r3, r3, #4
 8001e40:	6213      	str	r3, [r2, #32]
 8001e42:	e01c      	b.n	8001e7e <HAL_RCC_OscConfig+0x36e>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	2b05      	cmp	r3, #5
 8001e4a:	d10c      	bne.n	8001e66 <HAL_RCC_OscConfig+0x356>
 8001e4c:	4b6d      	ldr	r3, [pc, #436]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	4a6c      	ldr	r2, [pc, #432]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001e52:	f043 0304 	orr.w	r3, r3, #4
 8001e56:	6213      	str	r3, [r2, #32]
 8001e58:	4b6a      	ldr	r3, [pc, #424]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	4a69      	ldr	r2, [pc, #420]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	6213      	str	r3, [r2, #32]
 8001e64:	e00b      	b.n	8001e7e <HAL_RCC_OscConfig+0x36e>
 8001e66:	4b67      	ldr	r3, [pc, #412]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	4a66      	ldr	r2, [pc, #408]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001e6c:	f023 0301 	bic.w	r3, r3, #1
 8001e70:	6213      	str	r3, [r2, #32]
 8001e72:	4b64      	ldr	r3, [pc, #400]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	4a63      	ldr	r2, [pc, #396]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001e78:	f023 0304 	bic.w	r3, r3, #4
 8001e7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d015      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e86:	f7ff fb5d 	bl	8001544 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8c:	e00a      	b.n	8001ea4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8e:	f7ff fb59 	bl	8001544 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e0ab      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea4:	4b57      	ldr	r3, [pc, #348]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0ee      	beq.n	8001e8e <HAL_RCC_OscConfig+0x37e>
 8001eb0:	e014      	b.n	8001edc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb2:	f7ff fb47 	bl	8001544 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb8:	e00a      	b.n	8001ed0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eba:	f7ff fb43 	bl	8001544 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e095      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed0:	4b4c      	ldr	r3, [pc, #304]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1ee      	bne.n	8001eba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001edc:	7dfb      	ldrb	r3, [r7, #23]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d105      	bne.n	8001eee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee2:	4b48      	ldr	r3, [pc, #288]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	4a47      	ldr	r2, [pc, #284]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 8081 	beq.w	8001ffa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ef8:	4b42      	ldr	r3, [pc, #264]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 030c 	and.w	r3, r3, #12
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d061      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d146      	bne.n	8001f9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0c:	4b3f      	ldr	r3, [pc, #252]	; (800200c <HAL_RCC_OscConfig+0x4fc>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f12:	f7ff fb17 	bl	8001544 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1a:	f7ff fb13 	bl	8001544 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e067      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2c:	4b35      	ldr	r3, [pc, #212]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1f0      	bne.n	8001f1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f40:	d108      	bne.n	8001f54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f42:	4b30      	ldr	r3, [pc, #192]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	492d      	ldr	r1, [pc, #180]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f54:	4b2b      	ldr	r3, [pc, #172]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a19      	ldr	r1, [r3, #32]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	430b      	orrs	r3, r1
 8001f66:	4927      	ldr	r1, [pc, #156]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f6c:	4b27      	ldr	r3, [pc, #156]	; (800200c <HAL_RCC_OscConfig+0x4fc>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f72:	f7ff fae7 	bl	8001544 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7a:	f7ff fae3 	bl	8001544 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e037      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0f0      	beq.n	8001f7a <HAL_RCC_OscConfig+0x46a>
 8001f98:	e02f      	b.n	8001ffa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9a:	4b1c      	ldr	r3, [pc, #112]	; (800200c <HAL_RCC_OscConfig+0x4fc>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa0:	f7ff fad0 	bl	8001544 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa8:	f7ff facc 	bl	8001544 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e020      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fba:	4b12      	ldr	r3, [pc, #72]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f0      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x498>
 8001fc6:	e018      	b.n	8001ffa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e013      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d106      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40021000 	.word	0x40021000
 8002008:	40007000 	.word	0x40007000
 800200c:	42420060 	.word	0x42420060

08002010 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e0d0      	b.n	80021c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002024:	4b6a      	ldr	r3, [pc, #424]	; (80021d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d910      	bls.n	8002054 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002032:	4b67      	ldr	r3, [pc, #412]	; (80021d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f023 0207 	bic.w	r2, r3, #7
 800203a:	4965      	ldr	r1, [pc, #404]	; (80021d0 <HAL_RCC_ClockConfig+0x1c0>)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	4313      	orrs	r3, r2
 8002040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002042:	4b63      	ldr	r3, [pc, #396]	; (80021d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0b8      	b.n	80021c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d020      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	d005      	beq.n	8002078 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800206c:	4b59      	ldr	r3, [pc, #356]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	4a58      	ldr	r2, [pc, #352]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002072:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002076:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0308 	and.w	r3, r3, #8
 8002080:	2b00      	cmp	r3, #0
 8002082:	d005      	beq.n	8002090 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002084:	4b53      	ldr	r3, [pc, #332]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	4a52      	ldr	r2, [pc, #328]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 800208a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800208e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002090:	4b50      	ldr	r3, [pc, #320]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	494d      	ldr	r1, [pc, #308]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d040      	beq.n	8002130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d107      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b6:	4b47      	ldr	r3, [pc, #284]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d115      	bne.n	80020ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e07f      	b.n	80021c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d107      	bne.n	80020de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ce:	4b41      	ldr	r3, [pc, #260]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d109      	bne.n	80020ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e073      	b.n	80021c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020de:	4b3d      	ldr	r3, [pc, #244]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e06b      	b.n	80021c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ee:	4b39      	ldr	r3, [pc, #228]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f023 0203 	bic.w	r2, r3, #3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	4936      	ldr	r1, [pc, #216]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002100:	f7ff fa20 	bl	8001544 <HAL_GetTick>
 8002104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002106:	e00a      	b.n	800211e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002108:	f7ff fa1c 	bl	8001544 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	f241 3288 	movw	r2, #5000	; 0x1388
 8002116:	4293      	cmp	r3, r2
 8002118:	d901      	bls.n	800211e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e053      	b.n	80021c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211e:	4b2d      	ldr	r3, [pc, #180]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 020c 	and.w	r2, r3, #12
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	429a      	cmp	r2, r3
 800212e:	d1eb      	bne.n	8002108 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002130:	4b27      	ldr	r3, [pc, #156]	; (80021d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d210      	bcs.n	8002160 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213e:	4b24      	ldr	r3, [pc, #144]	; (80021d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f023 0207 	bic.w	r2, r3, #7
 8002146:	4922      	ldr	r1, [pc, #136]	; (80021d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	4313      	orrs	r3, r2
 800214c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800214e:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	429a      	cmp	r2, r3
 800215a:	d001      	beq.n	8002160 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e032      	b.n	80021c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	d008      	beq.n	800217e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800216c:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	4916      	ldr	r1, [pc, #88]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b00      	cmp	r3, #0
 8002188:	d009      	beq.n	800219e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800218a:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	490e      	ldr	r1, [pc, #56]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	4313      	orrs	r3, r2
 800219c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800219e:	f000 f821 	bl	80021e4 <HAL_RCC_GetSysClockFreq>
 80021a2:	4602      	mov	r2, r0
 80021a4:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	091b      	lsrs	r3, r3, #4
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	490a      	ldr	r1, [pc, #40]	; (80021d8 <HAL_RCC_ClockConfig+0x1c8>)
 80021b0:	5ccb      	ldrb	r3, [r1, r3]
 80021b2:	fa22 f303 	lsr.w	r3, r2, r3
 80021b6:	4a09      	ldr	r2, [pc, #36]	; (80021dc <HAL_RCC_ClockConfig+0x1cc>)
 80021b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ba:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <HAL_RCC_ClockConfig+0x1d0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff f97e 	bl	80014c0 <HAL_InitTick>

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40022000 	.word	0x40022000
 80021d4:	40021000 	.word	0x40021000
 80021d8:	08002b34 	.word	0x08002b34
 80021dc:	20000018 	.word	0x20000018
 80021e0:	2000001c 	.word	0x2000001c

080021e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e4:	b490      	push	{r4, r7}
 80021e6:	b08a      	sub	sp, #40	; 0x28
 80021e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021ea:	4b2a      	ldr	r3, [pc, #168]	; (8002294 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021ec:	1d3c      	adds	r4, r7, #4
 80021ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021f4:	f240 2301 	movw	r3, #513	; 0x201
 80021f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	2300      	movs	r3, #0
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800220e:	4b22      	ldr	r3, [pc, #136]	; (8002298 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	2b04      	cmp	r3, #4
 800221c:	d002      	beq.n	8002224 <HAL_RCC_GetSysClockFreq+0x40>
 800221e:	2b08      	cmp	r3, #8
 8002220:	d003      	beq.n	800222a <HAL_RCC_GetSysClockFreq+0x46>
 8002222:	e02d      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002224:	4b1d      	ldr	r3, [pc, #116]	; (800229c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002226:	623b      	str	r3, [r7, #32]
      break;
 8002228:	e02d      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	0c9b      	lsrs	r3, r3, #18
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002236:	4413      	add	r3, r2
 8002238:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800223c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d013      	beq.n	8002270 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002248:	4b13      	ldr	r3, [pc, #76]	; (8002298 <HAL_RCC_GetSysClockFreq+0xb4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	0c5b      	lsrs	r3, r3, #17
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002256:	4413      	add	r3, r2
 8002258:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800225c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	4a0e      	ldr	r2, [pc, #56]	; (800229c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002262:	fb02 f203 	mul.w	r2, r2, r3
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	fbb2 f3f3 	udiv	r3, r2, r3
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
 800226e:	e004      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	4a0b      	ldr	r2, [pc, #44]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	623b      	str	r3, [r7, #32]
      break;
 800227e:	e002      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002282:	623b      	str	r3, [r7, #32]
      break;
 8002284:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002286:	6a3b      	ldr	r3, [r7, #32]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3728      	adds	r7, #40	; 0x28
 800228c:	46bd      	mov	sp, r7
 800228e:	bc90      	pop	{r4, r7}
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	08002b24 	.word	0x08002b24
 8002298:	40021000 	.word	0x40021000
 800229c:	007a1200 	.word	0x007a1200
 80022a0:	003d0900 	.word	0x003d0900

080022a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <RCC_Delay+0x34>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <RCC_Delay+0x38>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	0a5b      	lsrs	r3, r3, #9
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	fb02 f303 	mul.w	r3, r2, r3
 80022be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022c0:	bf00      	nop
  }
  while (Delay --);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	1e5a      	subs	r2, r3, #1
 80022c6:	60fa      	str	r2, [r7, #12]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f9      	bne.n	80022c0 <RCC_Delay+0x1c>
}
 80022cc:	bf00      	nop
 80022ce:	bf00      	nop
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr
 80022d8:	20000018 	.word	0x20000018
 80022dc:	10624dd3 	.word	0x10624dd3

080022e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e041      	b.n	8002376 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d106      	bne.n	800230c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff f832 	bl	8001370 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2202      	movs	r2, #2
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3304      	adds	r3, #4
 800231c:	4619      	mov	r1, r3
 800231e:	4610      	mov	r0, r2
 8002320:	f000 fa6a 	bl	80027f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b01      	cmp	r3, #1
 8002392:	d001      	beq.n	8002398 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e035      	b.n	8002404 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0201 	orr.w	r2, r2, #1
 80023ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a16      	ldr	r2, [pc, #88]	; (8002410 <HAL_TIM_Base_Start_IT+0x90>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d009      	beq.n	80023ce <HAL_TIM_Base_Start_IT+0x4e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c2:	d004      	beq.n	80023ce <HAL_TIM_Base_Start_IT+0x4e>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a12      	ldr	r2, [pc, #72]	; (8002414 <HAL_TIM_Base_Start_IT+0x94>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d111      	bne.n	80023f2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2b06      	cmp	r3, #6
 80023de:	d010      	beq.n	8002402 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0201 	orr.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023f0:	e007      	b.n	8002402 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f042 0201 	orr.w	r2, r2, #1
 8002400:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40012c00 	.word	0x40012c00
 8002414:	40000400 	.word	0x40000400

08002418 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b02      	cmp	r3, #2
 800242c:	d122      	bne.n	8002474 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b02      	cmp	r3, #2
 800243a:	d11b      	bne.n	8002474 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f06f 0202 	mvn.w	r2, #2
 8002444:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f9b1 	bl	80027c2 <HAL_TIM_IC_CaptureCallback>
 8002460:	e005      	b.n	800246e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f9a4 	bl	80027b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f9b3 	bl	80027d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	f003 0304 	and.w	r3, r3, #4
 800247e:	2b04      	cmp	r3, #4
 8002480:	d122      	bne.n	80024c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b04      	cmp	r3, #4
 800248e:	d11b      	bne.n	80024c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f06f 0204 	mvn.w	r2, #4
 8002498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2202      	movs	r2, #2
 800249e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f987 	bl	80027c2 <HAL_TIM_IC_CaptureCallback>
 80024b4:	e005      	b.n	80024c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f97a 	bl	80027b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f989 	bl	80027d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d122      	bne.n	800251c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d11b      	bne.n	800251c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f06f 0208 	mvn.w	r2, #8
 80024ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2204      	movs	r2, #4
 80024f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f95d 	bl	80027c2 <HAL_TIM_IC_CaptureCallback>
 8002508:	e005      	b.n	8002516 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f950 	bl	80027b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 f95f 	bl	80027d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	2b10      	cmp	r3, #16
 8002528:	d122      	bne.n	8002570 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f003 0310 	and.w	r3, r3, #16
 8002534:	2b10      	cmp	r3, #16
 8002536:	d11b      	bne.n	8002570 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f06f 0210 	mvn.w	r2, #16
 8002540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2208      	movs	r2, #8
 8002546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f933 	bl	80027c2 <HAL_TIM_IC_CaptureCallback>
 800255c:	e005      	b.n	800256a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f926 	bl	80027b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f935 	bl	80027d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b01      	cmp	r3, #1
 800257c:	d10e      	bne.n	800259c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b01      	cmp	r3, #1
 800258a:	d107      	bne.n	800259c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f06f 0201 	mvn.w	r2, #1
 8002594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7fe ff46 	bl	8001428 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a6:	2b80      	cmp	r3, #128	; 0x80
 80025a8:	d10e      	bne.n	80025c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b4:	2b80      	cmp	r3, #128	; 0x80
 80025b6:	d107      	bne.n	80025c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 fa67 	bl	8002a96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d2:	2b40      	cmp	r3, #64	; 0x40
 80025d4:	d10e      	bne.n	80025f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e0:	2b40      	cmp	r3, #64	; 0x40
 80025e2:	d107      	bne.n	80025f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f8f9 	bl	80027e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	f003 0320 	and.w	r3, r3, #32
 80025fe:	2b20      	cmp	r3, #32
 8002600:	d10e      	bne.n	8002620 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	f003 0320 	and.w	r3, r3, #32
 800260c:	2b20      	cmp	r3, #32
 800260e:	d107      	bne.n	8002620 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f06f 0220 	mvn.w	r2, #32
 8002618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 fa32 	bl	8002a84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002620:	bf00      	nop
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <HAL_TIM_ConfigClockSource+0x18>
 800263c:	2302      	movs	r3, #2
 800263e:	e0b3      	b.n	80027a8 <HAL_TIM_ConfigClockSource+0x180>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2202      	movs	r2, #2
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800265e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002666:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002678:	d03e      	beq.n	80026f8 <HAL_TIM_ConfigClockSource+0xd0>
 800267a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800267e:	f200 8087 	bhi.w	8002790 <HAL_TIM_ConfigClockSource+0x168>
 8002682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002686:	f000 8085 	beq.w	8002794 <HAL_TIM_ConfigClockSource+0x16c>
 800268a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800268e:	d87f      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x168>
 8002690:	2b70      	cmp	r3, #112	; 0x70
 8002692:	d01a      	beq.n	80026ca <HAL_TIM_ConfigClockSource+0xa2>
 8002694:	2b70      	cmp	r3, #112	; 0x70
 8002696:	d87b      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x168>
 8002698:	2b60      	cmp	r3, #96	; 0x60
 800269a:	d050      	beq.n	800273e <HAL_TIM_ConfigClockSource+0x116>
 800269c:	2b60      	cmp	r3, #96	; 0x60
 800269e:	d877      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x168>
 80026a0:	2b50      	cmp	r3, #80	; 0x50
 80026a2:	d03c      	beq.n	800271e <HAL_TIM_ConfigClockSource+0xf6>
 80026a4:	2b50      	cmp	r3, #80	; 0x50
 80026a6:	d873      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x168>
 80026a8:	2b40      	cmp	r3, #64	; 0x40
 80026aa:	d058      	beq.n	800275e <HAL_TIM_ConfigClockSource+0x136>
 80026ac:	2b40      	cmp	r3, #64	; 0x40
 80026ae:	d86f      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x168>
 80026b0:	2b30      	cmp	r3, #48	; 0x30
 80026b2:	d064      	beq.n	800277e <HAL_TIM_ConfigClockSource+0x156>
 80026b4:	2b30      	cmp	r3, #48	; 0x30
 80026b6:	d86b      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x168>
 80026b8:	2b20      	cmp	r3, #32
 80026ba:	d060      	beq.n	800277e <HAL_TIM_ConfigClockSource+0x156>
 80026bc:	2b20      	cmp	r3, #32
 80026be:	d867      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x168>
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d05c      	beq.n	800277e <HAL_TIM_ConfigClockSource+0x156>
 80026c4:	2b10      	cmp	r3, #16
 80026c6:	d05a      	beq.n	800277e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80026c8:	e062      	b.n	8002790 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	6899      	ldr	r1, [r3, #8]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f000 f95c 	bl	8002996 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	609a      	str	r2, [r3, #8]
      break;
 80026f6:	e04e      	b.n	8002796 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	6899      	ldr	r1, [r3, #8]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f000 f945 	bl	8002996 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800271a:	609a      	str	r2, [r3, #8]
      break;
 800271c:	e03b      	b.n	8002796 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6859      	ldr	r1, [r3, #4]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	461a      	mov	r2, r3
 800272c:	f000 f8bc 	bl	80028a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2150      	movs	r1, #80	; 0x50
 8002736:	4618      	mov	r0, r3
 8002738:	f000 f913 	bl	8002962 <TIM_ITRx_SetConfig>
      break;
 800273c:	e02b      	b.n	8002796 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	6859      	ldr	r1, [r3, #4]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	461a      	mov	r2, r3
 800274c:	f000 f8da 	bl	8002904 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2160      	movs	r1, #96	; 0x60
 8002756:	4618      	mov	r0, r3
 8002758:	f000 f903 	bl	8002962 <TIM_ITRx_SetConfig>
      break;
 800275c:	e01b      	b.n	8002796 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	6859      	ldr	r1, [r3, #4]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	461a      	mov	r2, r3
 800276c:	f000 f89c 	bl	80028a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2140      	movs	r1, #64	; 0x40
 8002776:	4618      	mov	r0, r3
 8002778:	f000 f8f3 	bl	8002962 <TIM_ITRx_SetConfig>
      break;
 800277c:	e00b      	b.n	8002796 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4619      	mov	r1, r3
 8002788:	4610      	mov	r0, r2
 800278a:	f000 f8ea 	bl	8002962 <TIM_ITRx_SetConfig>
        break;
 800278e:	e002      	b.n	8002796 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002790:	bf00      	nop
 8002792:	e000      	b.n	8002796 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002794:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr

080027c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr

080027d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr

080027e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a25      	ldr	r2, [pc, #148]	; (80028a0 <TIM_Base_SetConfig+0xa8>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d007      	beq.n	8002820 <TIM_Base_SetConfig+0x28>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002816:	d003      	beq.n	8002820 <TIM_Base_SetConfig+0x28>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a22      	ldr	r2, [pc, #136]	; (80028a4 <TIM_Base_SetConfig+0xac>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d108      	bne.n	8002832 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	4313      	orrs	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a1a      	ldr	r2, [pc, #104]	; (80028a0 <TIM_Base_SetConfig+0xa8>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d007      	beq.n	800284a <TIM_Base_SetConfig+0x52>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002840:	d003      	beq.n	800284a <TIM_Base_SetConfig+0x52>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a17      	ldr	r2, [pc, #92]	; (80028a4 <TIM_Base_SetConfig+0xac>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d108      	bne.n	800285c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4313      	orrs	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	4313      	orrs	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a07      	ldr	r2, [pc, #28]	; (80028a0 <TIM_Base_SetConfig+0xa8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d103      	bne.n	8002890 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	615a      	str	r2, [r3, #20]
}
 8002896:	bf00      	nop
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr
 80028a0:	40012c00 	.word	0x40012c00
 80028a4:	40000400 	.word	0x40000400

080028a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	f023 0201 	bic.w	r2, r3, #1
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f023 030a 	bic.w	r3, r3, #10
 80028e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	621a      	str	r2, [r3, #32]
}
 80028fa:	bf00      	nop
 80028fc:	371c      	adds	r7, #28
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	f023 0210 	bic.w	r2, r3, #16
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800292e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	031b      	lsls	r3, r3, #12
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	4313      	orrs	r3, r2
 8002938:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002940:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	621a      	str	r2, [r3, #32]
}
 8002958:	bf00      	nop
 800295a:	371c      	adds	r7, #28
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr

08002962 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002962:	b480      	push	{r7}
 8002964:	b085      	sub	sp, #20
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002978:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4313      	orrs	r3, r2
 8002980:	f043 0307 	orr.w	r3, r3, #7
 8002984:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	609a      	str	r2, [r3, #8]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr

08002996 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002996:	b480      	push	{r7}
 8002998:	b087      	sub	sp, #28
 800299a:	af00      	add	r7, sp, #0
 800299c:	60f8      	str	r0, [r7, #12]
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	607a      	str	r2, [r7, #4]
 80029a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	021a      	lsls	r2, r3, #8
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	431a      	orrs	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	4313      	orrs	r3, r2
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	609a      	str	r2, [r3, #8]
}
 80029ca:	bf00      	nop
 80029cc:	371c      	adds	r7, #28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr

080029d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e041      	b.n	8002a70 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a14      	ldr	r2, [pc, #80]	; (8002a7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d009      	beq.n	8002a44 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a38:	d004      	beq.n	8002a44 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a10      	ldr	r2, [pc, #64]	; (8002a80 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d10c      	bne.n	8002a5e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40012c00 	.word	0x40012c00
 8002a80:	40000400 	.word	0x40000400

08002a84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr

08002a96 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr

08002aa8 <__libc_init_array>:
 8002aa8:	b570      	push	{r4, r5, r6, lr}
 8002aaa:	2600      	movs	r6, #0
 8002aac:	4d0c      	ldr	r5, [pc, #48]	; (8002ae0 <__libc_init_array+0x38>)
 8002aae:	4c0d      	ldr	r4, [pc, #52]	; (8002ae4 <__libc_init_array+0x3c>)
 8002ab0:	1b64      	subs	r4, r4, r5
 8002ab2:	10a4      	asrs	r4, r4, #2
 8002ab4:	42a6      	cmp	r6, r4
 8002ab6:	d109      	bne.n	8002acc <__libc_init_array+0x24>
 8002ab8:	f000 f822 	bl	8002b00 <_init>
 8002abc:	2600      	movs	r6, #0
 8002abe:	4d0a      	ldr	r5, [pc, #40]	; (8002ae8 <__libc_init_array+0x40>)
 8002ac0:	4c0a      	ldr	r4, [pc, #40]	; (8002aec <__libc_init_array+0x44>)
 8002ac2:	1b64      	subs	r4, r4, r5
 8002ac4:	10a4      	asrs	r4, r4, #2
 8002ac6:	42a6      	cmp	r6, r4
 8002ac8:	d105      	bne.n	8002ad6 <__libc_init_array+0x2e>
 8002aca:	bd70      	pop	{r4, r5, r6, pc}
 8002acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ad0:	4798      	blx	r3
 8002ad2:	3601      	adds	r6, #1
 8002ad4:	e7ee      	b.n	8002ab4 <__libc_init_array+0xc>
 8002ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ada:	4798      	blx	r3
 8002adc:	3601      	adds	r6, #1
 8002ade:	e7f2      	b.n	8002ac6 <__libc_init_array+0x1e>
 8002ae0:	08002b44 	.word	0x08002b44
 8002ae4:	08002b44 	.word	0x08002b44
 8002ae8:	08002b44 	.word	0x08002b44
 8002aec:	08002b48 	.word	0x08002b48

08002af0 <memset>:
 8002af0:	4603      	mov	r3, r0
 8002af2:	4402      	add	r2, r0
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d100      	bne.n	8002afa <memset+0xa>
 8002af8:	4770      	bx	lr
 8002afa:	f803 1b01 	strb.w	r1, [r3], #1
 8002afe:	e7f9      	b.n	8002af4 <memset+0x4>

08002b00 <_init>:
 8002b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b02:	bf00      	nop
 8002b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b06:	bc08      	pop	{r3}
 8002b08:	469e      	mov	lr, r3
 8002b0a:	4770      	bx	lr

08002b0c <_fini>:
 8002b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0e:	bf00      	nop
 8002b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b12:	bc08      	pop	{r3}
 8002b14:	469e      	mov	lr, r3
 8002b16:	4770      	bx	lr
